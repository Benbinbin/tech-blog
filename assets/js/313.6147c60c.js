(window.webpackJsonp=window.webpackJsonp||[]).push([[313],{1407:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"变量"}},[t._v("变量")]),t._v(" "),a("p",[t._v("变量用来储存信息，使用赋值操作符 "),a("code",[t._v("=")]),t._v(" 为变量绑定数据（数据保存到与该变量相关联的内存区域），数据通过变量名进行存取操作。")]),t._v(" "),a("h2",{attrs:{id:"声明变量"}},[t._v("声明变量")]),t._v(" "),a("p",[t._v("在使用变量前应该先定义/声明它（虽然在非严格模式下简单地通过赋值可以创建一个变量，但并不推荐）。"),a("s",[t._v("使用关键字 "),a("code",[t._v("var")]),t._v(" 创建变量")]),t._v("推荐使用关键字 "),a("code",[t._v("let")]),t._v(" 或 "),a("code",[t._v("const")]),t._v(" （而非 "),a("code",[t._v("var")]),t._v("）声明变量。")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("let")]),t._v(" 声明的变量"),a("strong",[t._v("可以重新赋值")]),t._v("（但是不能在同一作用域内重新声明）。")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("const")]),t._v(" 声明的变量必须赋初始值，且"),a("strong",[t._v("无法重新赋值")]),t._v("（一般用于创建"),a("a",{attrs:{href:"#%E5%B8%B8%E9%87%8F"}},[t._v("常量")]),t._v("）。 "),a("code",[t._v("const")]),t._v(" 是声明变量最严格的方式，当标识符在程序的整个生命周期内都不会改变，建议使用 "),a("code",[t._v("const")]),t._v(" 声明变量（还可以将变量名全大写），以使代码阅读性更强，传递更准确的含义。")])]),t._v(" "),a("p",[t._v("连续声明好几个变量，在开头使用一个声明关键字，而多个变量用逗号 "),a("code",[t._v(",")]),t._v(" 分隔（最后用别忘了使用 "),a("code",[t._v(";")]),t._v(" 标记语句结束），习惯将一个变量置于一行，这样声明有点长，但更容易阅读。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明多个变量，变量之间用逗号分隔，并各变量占一行便于阅读")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("⚠️ 推荐使用 "),a("code",[t._v("let")]),t._v(" 或 "),a("code",[t._v("const")]),t._v(" 而不是 "),a("code",[t._v("var")]),t._v("，因为前两者可以让变量陷入暂时性死区，避免浏览器解析 JavaScript 时将变量提升到函数作用域顶部引起不可预计的错误。")]),t._v(" "),a("h2",{attrs:{id:"旧式变量声明"}},[t._v("旧式变量声明")]),t._v(" "),a("p",[t._v("使用「旧式」的关键字 "),a("code",[t._v("var")]),t._v(" 声明的变量没有块级作用域，只有函数作用域和全局作用域。")]),t._v(" "),a("p",[t._v("而且声明被 🎦 "),a("strong",[a("a",{attrs:{href:"https://www.jianguoyun.com/p/Dab9nV0QjNDGBxiL--AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("提升 hoisting/raising"),a("OutboundLink")],1)]),t._v(" 到函数开头处理（如果是全局变量就会在脚本启动时进行处理），即 "),a("code",[t._v("var")]),t._v(" 声明的变量会在函数开头被定义，与它在代码中定义的位置无关。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  phrase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phrase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" phrase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该声明会被自动提升到函数顶部先进行处理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v(":waring: 使用关键字 "),a("code",[t._v("var")]),t._v(" 定义的变量，其声明会提升（此时的变量值为 "),a("code",[t._v("undefined")]),t._v("），但赋值操作并不会。因为所有 "),a("code",[t._v("var")]),t._v(" 声明都是在函数开头处理的，我们可以在任何地方引用它们，但是在它们被赋值之前变量值都是 "),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phrase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" phrase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phrase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("💡 在旧式的脚本中会使用一种称为 "),a("strong",[a("RouterLink",{attrs:{to:"/web/Frontend/JavaScript/语法基础/函数.html#立即调用函数表达式"}},[t._v("立即调用函数表达式 IIFE")])],1),t._v(" 技术来「修复」使用关键字 "),a("code",[t._v("var")]),t._v(" 声明的变量所造成的副作用。")]),t._v(" "),a("h2",{attrs:{id:"变量作用域"}},[t._v("变量作用域")]),t._v(" "),a("p",[t._v("作用域是限制变量或函数的可访问的区域。如果在代码块 "),a("code",[t._v("{...}")]),t._v(" 内声明了一个变量，那么这个变量只在该代码块内可见，该限制对于条件语句、循环语句、函数内定义的变量都适用。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用局部变量完成一些不应该被外面访问的工作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: message is not defined")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量 i 仅在这个 for 循环的内部可见")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0，然后是 1，然后是 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error, no such variable")]),t._v("\n")])])]),a("p",[t._v("💡 从视觉上看，"),a("code",[t._v("let i")]),t._v(" 位于 "),a("code",[t._v("{...}")]),t._v(" 之外，但是 "),a("code",[t._v("for")]),t._v(" 是特殊的结构，在判断语句中的变量声明被视为块的一部分。")]),t._v(" "),a("p",[t._v("⚠️ 只有使用关键字 "),a("code",[t._v("let")]),t._v(" 或 "),a("code",[t._v("const")]),t._v(" 声明的变量才遵循代码块作用域的限制，使用旧关键字 "),a("code",[t._v("var")]),t._v(" 声明的变量则只有全局作用域和函数作用域之分，如在条件语句或循环语句中声明的变量在代码块外依然可以访问。")]),t._v(" "),a("p",[t._v("利用变量作用域的限制，可以使用「空」的代码块将变量隔离到「局部作用域」中。如果在 Web 浏览器中所有脚本都共享同一个全局环境，当我们在一个脚本中创建一个全局变量，对于其他脚本来说它也是可用的，要是存在两个脚本使用同一个变量就会产生冲突报错，此时如果适用代码块 "),a("code",[t._v("{}")]),t._v(" 将大部分变量包括就可以避免这种问题。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显示 message")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显示另一个 message")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: variable already declared，同一词法环境中不可对同一变量进行两次声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("💡 代码块有其自身的"),a("a",{attrs:{href:"https://zh.javascript.info/closure#ci-fa-huan-jing",target:"_blank",rel:"noopener noreferrer"}},[t._v("词法环境"),a("OutboundLink")],1),t._v("，块之外（或另一个脚本内）的代码访问不到代码块内的变量。")]),t._v(" "),a("h2",{attrs:{id:"变量名"}},[t._v("变量名")]),t._v(" "),a("p",[t._v("变量名应尽量可以准确、简洁地描述数据内容，其遵循 "),a("strong",[t._v("小驼峰命名法 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("camelCase"),a("OutboundLink")],1),t._v("（第一个单词小写，所有后续单词都首字母大写）规则")]),t._v("。")]),t._v(" "),a("p",[t._v("变量名只能由字母、数字、符号 "),a("code",[t._v("$")]),t._v(" 和 "),a("code",[t._v("_")]),t._v(" 构成，首字符不能为数字，且"),a("strong",[t._v("区分大小写")]),t._v("。")]),t._v(" "),a("p",[t._v("⚠️ 连字符 "),a("code",[t._v("-")]),t._v(" 不允许用于变量命名")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" totalAfterTax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("53.03")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果变量名由多个单词组成，使用驼峰命名法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果变量名是一个单词，则使用全小写字母")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" $ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 使用 "$" 声明一个变量')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 现在用 "_" 声明一个变量')]),t._v("\n")])])]),a("h2",{attrs:{id:"保留字"}},[t._v("保留字")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#ECMAScript_6_%E4%B8%AD%E7%9A%84%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("保留字"),a("OutboundLink")],1),t._v("无法用作变量命名，因为它们被用于编程语言本身了，如 "),a("code",[t._v("let")]),t._v("、"),a("code",[t._v("class")]),t._v("、"),a("code",[t._v("return")]),t._v("、"),a("code",[t._v("function")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"常量"}},[t._v("常量")]),t._v(" "),a("p",[t._v("常数是指在执行之前就已知了或在执行期间被「计算」出来不会再改变的值，即一般通过 hard-coded  硬编码生成的值用大写命名的常量来存储；而执行「计算」出来的值（虽然它还是有一定的可变性，随着代码的执行情况而改变）某种意义上赋予初始值后就不会变化。")]),t._v(" "),a("p",[t._v("常量一个普遍用法是作为别名，以便记住那些在执行之前就已知（不改变）的难以记住的值。硬编码产生的常量一般"),a("strong",[t._v("使用大写字母和下划线来命名")]),t._v("，而计算得出的初始值的常量则使用小驼峰命名的。")]),t._v(" "),a("p",[t._v("如用常量表示 web 颜色（十六进制）的别名。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COLOR_RED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#F00"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COLOR_GREEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#0F0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COLOR_BLUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#00F"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COLOR_ORANGE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#FF7F00"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当我们需要一个该颜色，可以基于其变量（别名）快速获得")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COLOR_ORANGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("💡 使用关键字 "),a("code",[t._v("const")]),t._v(" 声明的常量之后不可修改，否则浏览器会在控制台输出错误。但是如果将对象作为值，由于它赋值时传递的是引用，所以修改对象属性并不会报错，只有修改常量对于对象的引用才会报错。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" family "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  mom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'老媽'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  me"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'小明'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sister"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'小橙'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfamily"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'爸爸'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改对象属性并不会报错")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("family"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfamily "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改变量的引用，会报错")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);