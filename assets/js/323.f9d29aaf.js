(window.webpackJsonp=window.webpackJsonp||[]).push([[323],{1426:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"集合"}},[t._v("集合")]),t._v(" "),a("p",[t._v("集合 "),a("code",[t._v("Set")]),t._v(" 是 ES6 中新增的内置对象，它是一些值的集合，其中每个值都是唯一不重复的，这和数学意义上的集合相同。使用起来类似于数组，但 "),a("code",[t._v("Set")]),t._v(" 与数组之间的最大区别是：")]),t._v(" "),a("ul",[a("li",[t._v("集合不基于索引，"),a("strong",[t._v("不能")]),t._v("根据集合中的条目在集合中的位置引用这些条目")]),t._v(" "),a("li",[t._v("条目不能单独被访问，但可创建迭代器循环访问 "),a("code",[t._v("Set")])]),t._v(" "),a("li",[t._v("元素是唯一的")])]),t._v(" "),a("p",[t._v("使用构造函数 "),a("code",[t._v("Set(iterable)")]),t._v(" 根据可迭代对象创建集合，通常是传递一个数组，将会从数组里面复制元素到 set 中，其中的元素数据类型可以不同，但重复的元素会自动移除")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" games "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Super Mario Bros.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Banjo-Kazooie'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mario Kart'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Super Mario Bros.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在创建 Set 时，会自动移除重复的条目")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("games"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set {'Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart'}")]),t._v("\n")])])]),a("h2",{attrs:{id:"修改集合"}},[t._v("修改集合")]),t._v(" "),a("ul",[a("li",[t._v("方法 "),a("code",[t._v(".add(value)")]),t._v(" 向集合添加条目，返回对象本身。如果尝试向集合添加重复的条目，系统不会报错，但是该条目不会添加到集合中，避免了数据的冗余。")]),t._v(" "),a("li",[t._v("方法 "),a("code",[t._v(".delete(value)")]),t._v(" 从集合中删除条目，返回一个布尔值，如果该元素存在，返回 "),a("code",[t._v("true")]),t._v("，否则返回 "),a("code",[t._v("false")])]),t._v(" "),a("li",[t._v("方法 "),a("code",[t._v(".clear()")]),t._v(" 清空集合，删除集合中的所有元素")])]),t._v(" "),a("h2",{attrs:{id:"集合长度"}},[t._v("集合长度")]),t._v(" "),a("p",[t._v("属性 "),a("code",[t._v(".size")]),t._v(" 返回集合中的条目数")]),t._v(" "),a("p",[t._v("⚠️ 不能像数组那样通过索引访问 Set，因此要使用 "),a("code",[t._v(".size")]),t._v(" 属性，而不是 "),a("code",[t._v(".length")]),t._v(" 属性获取集合的大小")]),t._v(" "),a("h2",{attrs:{id:"检查值"}},[t._v("检查值")]),t._v(" "),a("p",[t._v("使用方法 "),a("code",[t._v(".has(value)")]),t._v(" 检查集合中是否有 "),a("code",[t._v("value")]),t._v(" 值。如果集合中有该值，则返回 "),a("code",[t._v("true")]),t._v("；如果不存在就返回 "),a("code",[t._v("false")])]),t._v(" "),a("p",[t._v("💡 类似于数组方法 "),a("code",[t._v("arr.find(value)")]),t._v(" 在每次插入值时检查是否重复，但是这样性能会很差，因为这个方法会遍历整个数组来检查每个元素。Set 内部对唯一性检查进行了更好的优化。")]),t._v(" "),a("h2",{attrs:{id:"迭代"}},[t._v("迭代")]),t._v(" "),a("p",[t._v("集合 "),a("code",[t._v("set")]),t._v(" 是一个 JavaScript 内置的可迭代对象（默认迭代器与 "),a("code",[t._v("set.values()")]),t._v(" 生成的迭代器相同），结合 for-of 循环结构遍历所有元素。")]),t._v(" "),a("p",[t._v("💡 集合 "),a("code",[t._v("set")]),t._v(" 与映射 "),a("code",[t._v("map")]),t._v(" 类似，也有三种方法生成迭代器，这是为了与 Map 兼容。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("set.keys()")]),t._v(" 返回一个"),a("strong",[t._v("值")]),t._v("的迭代器（与 "),a("code",[t._v("set.values()")]),t._v(" 作用相同，这是为了兼容 Map），可遍历并返回所有的值")]),t._v(" "),a("li",[a("code",[t._v("set.values()")]),t._v(" 返回一个值的迭代器，遍历并返回所有的值")]),t._v(" "),a("li",[a("code",[t._v("set.entries()")]),t._v(" 返回一个"),a("strong",[t._v("值")]),t._v("的迭代器，遍历并返回所有的实体，它的存在也是为了兼容 "),a("code",[t._v("map")])])]),t._v(" "),a("p",[t._v("💡 集合与数组类似，提供了内置方法 "),a("code",[t._v(".forEach( function(value, valueAgain, set) )")]),t._v(" 对集合的每个元素执行一次回调函数处理。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"oranges"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apples"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bananas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// orange, apples, bananas")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与 forEach 相同：")]),t._v("\nset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valueAgain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("但注意一件有趣的设置"),a("code",[t._v("forEach(allback)")]),t._v(" 的回调函数有三个参数，一个 "),a("code",[t._v("value")]),t._v("，然后是 "),a("strong",[t._v("同一个值")]),t._v(" "),a("code",[t._v("valueAgain")]),t._v("，最后是目标对象，这是为了与 Map 兼容，")]),t._v(" "),a("p",[t._v("💡 迭代器除了可以用于 for-of 循环结构中，还可以使用方法 "),a("code",[t._v("next()")]),t._v(" 手动遍历每一项")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" months "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'January'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'February'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'March'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'April'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'May'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'June'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'July'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'August'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'September'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'October'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'November'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'December'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成迭代器，使用方法 next() 手动循环访问元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\niterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object {value: 'January', done: false}")]),t._v("\n")])])]),a("p",[t._v("⚠️ 在 Set 中迭代总是按照值插入的顺序进行的，所以我们不能说这些集合是无序的，但是我们不能对元素进行重新排序，也不能直接按其编号来获取元素。")]),t._v(" "),a("h2",{attrs:{id:"弱集合"}},[t._v("弱集合")]),t._v(" "),a("p",[t._v("根据 "),a("RouterLink",{attrs:{to:"/web/Frontend/JavaScript/语法基础/垃圾回收.html"}},[t._v("垃圾回收")]),t._v(" 规则可知 JavaScript 引擎在值可访问（并可能被使用）时将其存储在内存中，并不会将空间进行回收，⚠️ 通常当对象、数组这类数据结构在内存中时，它们的子元素，如对象的属性、数组的元素都是可以访问的（"),a("strong",[t._v("即使相应的变量/主存储器已经被覆盖")]),t._v("），这会造成回收清理很麻烦。")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" john "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该对象能被访问，john 是它的引用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖引用")]),t._v("\njohn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该对象将会被从内存中清除")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当对象引用在数组结构中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Ben "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ben"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" Ben "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖引用")]),t._v("\nBen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// john 被存储在数组里, 所以它不会被垃圾回收机制回收")]),t._v("\narray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {name: "Ben"} 仍然可以通过 array[0] 来获取它')]),t._v("\n")])])]),a("p",[t._v("如果使用对象作为 Set 元素，那么当 Set 存在时，该对象也将存在（即使引用该对象的变量已经被重置，该内存空间也不会被回收），这会造成无用资源占用内存的问题，可以使用另一种称为 "),a("code",[t._v("WeakSet")]),t._v(" 弱集合的数据结构代替，以解决垃圾回收的问题。")]),t._v(" "),a("p",[a("code",[t._v("WeakSet")]),t._v("与 "),a("code",[t._v("set")]),t._v(" 很像，最根本的不同是"),a("strong",[t._v("它不会阻止垃圾回收机制回收对象以释放内存空间")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Thomson "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thomson"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" weakSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nweakSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Thomson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nThomson "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 覆盖引用，对象 { name: "Thomson" } 被回收')]),t._v("\nweakSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Thomson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("此外它还有以下关键区别：")]),t._v(" "),a("ul",[a("li",[t._v("只能向 "),a("code",[t._v("WeakSet")]),t._v(" 添加对象（而不能是原始值），如果你尝试添加对象以外的内容系统将报错")]),t._v(" "),a("li",[t._v("对象只有在其它某个（些）地方能被访问的时候（主存储器未被覆盖），才能留在弱集合中。")]),t._v(" "),a("li",[a("code",[t._v("WeakSet")]),t._v(" 支持方法 "),a("code",[t._v(".add()")]),t._v("、"),a("code",[t._v(".has()")]),t._v("、"),a("code",[t._v(".delete()")]),t._v(" 但无法迭代（即不支持方法 "),a("code",[t._v(".keys()")]),t._v("、"),a("code",[t._v(".values()")]),t._v(" 等生成迭代器）")]),t._v(" "),a("li",[t._v("不支持 "),a("code",[t._v("size")]),t._v(" 属性，没有 "),a("code",[t._v(".clear()")]),t._v(" 方法")])]),t._v(" "),a("p",[t._v("💡 弱集合 "),a("code",[t._v("WeakSet")]),t._v(" 不支持引用所有键或其计数的方法和属性，仅允许单个操作。这种限制是由其工作原理决定的，如果一个对象丢失了其它所有引用（像上面示例中对象 "),a("code",[t._v('{ name: "Ben" }')]),t._v(" 唯一引用是变量 "),a("code",[t._v("Ben")]),t._v("，被重置为 "),a("code",[t._v("null")]),t._v("），那么它就会被垃圾回收机制自动回收。但是在从技术的角度并不能准确知道 "),a("strong",[t._v("何时会被回收")]),t._v("，这由 JavaScript 引擎决定的。因此，"),a("strong",[t._v("从技术上讲 "),a("code",[t._v("WeakMap")]),t._v(" 的当前元素的数量是未知的")]),t._v("。JavaScript 引擎可能清理了其中的垃圾，可能没清理，也可能清理了一部分。因此暂不支持访问 "),a("code",[t._v("WeakMap")]),t._v(" 的所有键/值的方法。")]),t._v(" "),a("p",[t._v("弱集合 "),a("code",[t._v("WeakSet")]),t._v(" 一般充当额外的存储空间，存储与对象相关的「是/否」信息的事实，即当对象相关的信息为真时，该对象会存储在弱集合种；而当主存储器被覆盖（对象引用被「移除」）对象也会从弱集合中回收，表示对象相关信息为否。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用弱集合记录追踪访问过网站的用户")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" visitedSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" john "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pete "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pete"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" mary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mary"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nvisitedSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("john"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// John 访问了我们")]),t._v("\nvisitedSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pete"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后是 Pete")]),t._v("\nvisitedSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("john"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// John 再次访问")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// visitedSet 现在有两个用户了")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查 John 是否来访过？")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitedSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("john"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查 Mary 是否来访过？")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitedSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\njohn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 同时 { name: "John" } 对象引用会从弱集合中回收移除')]),t._v("\n")])])]),a("p",[t._v("💡 WeakSet 一般被用作「主要」对象存储之外的「辅助」数据结构。一旦将对象从主存储器（变量引用被重置）中删除，如果该对象仅被用作 WeakSet 元素，那么它将被自动清除。")])])}),[],!1,null,null,null);s.default=e.exports}}]);