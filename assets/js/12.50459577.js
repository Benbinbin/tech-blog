(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{1269:function(t,_,v){"use strict";v.r(_);var e=v(18),r=Object(e.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"github基础"}},[t._v("Github基础")]),t._v(" "),e("p",[t._v("参考：")]),t._v(" "),e("ul",[e("li",[t._v("http://up-for-grabs.net/")]),t._v(" "),e("li",[t._v("http://www.firsttimersonly.com/")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/search?utf8=%E2%9C%93&q=label%3Afirst-timers-only+is%3Aopen&type=Issues&ref=searchresults",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub 上的（仅）初学者标签"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://medium.com/@kentcdodds/first-timers-only-78281ea47455",target:"_blank",rel:"noopener noreferrer"}},[t._v("「仅初学者」博文"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://gitbook.liuhui998.com/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Community Book 中译版"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/git-tips/tips",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-tips"),e("OutboundLink")],1),t._v("（"),e("a",{attrs:{href:"https://github.com/521xueweihan/git-tips",target:"_blank",rel:"noopener noreferrer"}},[t._v("中译版"),e("OutboundLink")],1),t._v("）")]),t._v(" "),e("li",[t._v("查看开发者的"),e("a",{attrs:{href:"http://firstpr.me/",target:"_blank",rel:"noopener noreferrer"}},[t._v("第一个 Pull Request"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("托管 Git 项目的方式有多种，目前最受欢迎的托管网站是 "),e("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"访问远程仓库"}},[t._v("访问远程仓库")]),t._v(" "),e("p",[t._v("通过位于 Web 上的"),e("strong",[t._v("仓库的 URL")]),t._v(" 和 Git 远程命令 "),e("code",[t._v("git remote")]),t._v(" 访问远程仓库并进行交互。")]),t._v(" "),e("p",[e("strong",[t._v("远程仓库的简写名 Shortname")]),t._v("\n将远程仓库克隆到本地后，该仓库会（通过 URL）与远程仓库绑定，运行命令 "),e("code",[t._v("git remote")]),t._v(" 会返回远程仓库的简写名（通常命名为 "),e("code",[t._v("origin")]),t._v("）。简写名是"),e("strong",[t._v("远程仓库路径")]),t._v("的简略表示。简写名仅局部用于当前仓库（如在你的本地仓库中）。")]),t._v(" "),e("p",[t._v("示例\n"),e("img",{attrs:{src:v(763),alt:"远程仓库简写名与路径"}})]),t._v(" "),e("ul",[e("li",[t._v("命令 "),e("code",[t._v("git remote")]),t._v("  设置选项 "),e("code",[t._v("-v")]),t._v(" 返回远程仓库的简写名及其所指的完整路径（即 URL）")]),t._v(" "),e("li",[t._v("使用命令 "),e("code",[t._v("git remote rename <origin_name> <new_name>")]),t._v(" 重命名远程仓库简写名")])]),t._v(" "),e("h2",{attrs:{id:"创建远程仓库"}},[t._v("创建远程仓库")]),t._v(" "),e("p",[t._v("从主页创建仓库可下拉导航栏标签创建或点击页面的 "),e("code",[t._v("New")]),t._v(" 按钮")]),t._v(" "),e("p",[e("img",{attrs:{src:v(764),alt:"创建仓库-1"}})]),t._v(" "),e("p",[t._v("在创建仓库设置仓库名称 Repository name 等相关信息。一般使用项目名称作为仓库的名称。")]),t._v(" "),e("p",[e("img",{attrs:{src:v(765),alt:"创建仓库-2"}})]),t._v(" "),e("p",[t._v("⚠️ 当本地等待 "),e("code",[t._v("push")]),t._v(" 的仓库已经有了 README 文件时，创建仓库时应取消勾选 "),e("code",[t._v("Initialize this repository with the README")]),t._v("（使用 README 初始化此仓库）选项")]),t._v(" "),e("p",[t._v("当新建仓库未初始化，显示出仓库的设置页面 "),e("code",[t._v("Quick setup")]),t._v("，根据本地仓库情况和提示进行操作")]),t._v(" "),e("p",[e("img",{attrs:{src:v(766),alt:"创建仓库-3"}})]),t._v(" "),e("ul",[e("li",[t._v("命令 "),e("code",[t._v("git remote add origin <URL>")]),t._v(" 创建了一个简写名 "),e("code",[t._v("origin")]),t._v(" （也可以设置为其他名称），并指向远程仓库完整路径（一般是 Web 上的远程仓库 URL）。添加远程仓库的路径，以在本地仓库与远程仓库之间建立连接。")]),t._v(" "),e("li",[t._v("使用命令 "),e("code",[t._v("git remote -v")]),t._v(" 查看远程仓库与本地仓库之间连接信息")])]),t._v(" "),e("h2",{attrs:{id:"推送更改至远程仓库"}},[t._v("推送更改至远程仓库")]),t._v(" "),e("p",[t._v("命令 "),e("code",[t._v("git push <remote-shortname> <branch>")]),t._v(" 将本地 commit 推送到远程仓库，要提供"),e("strong",[t._v("远程仓库简写名")]),t._v("以及用于容纳该 commit 的远程仓库的"),e("strong",[t._v("分支名")]),t._v("。")]),t._v(" "),e("p",[t._v("将当前本地仓库推送到简写名为 "),e("code",[t._v("origin")]),t._v(" 的远程仓库的 "),e("code",[t._v("master")]),t._v(" 分支")]),t._v(" "),e("p",[e("img",{attrs:{src:v(767),alt:"推送到远程仓库"}})]),t._v(" "),e("ul",[e("li",[t._v("将本地 commit 推送到远程残酷可能需要输入用户名和密码，这取决于你如何配置 GitHub 的以及使用的远程 URL 。\n"),e("ul",[e("li",[t._v("如果配置 GitHub 使用 HTTP 协议，就需要提供用户名和密码。如果你的密码出错，不用担心，它会让你重新输入")]),t._v(" "),e("li",[t._v("如果配置 GitHub 使用 SSH 协议，并提供过 SSH 密匙，则不需要提供密码。参阅 GitHub 文档 "),e("a",{attrs:{href:"https://help.github.com/articles/connecting-to-github-with-ssh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 SSH 连接"),e("OutboundLink")],1),t._v("。")])])]),t._v(" "),e("li",[t._v("Git 会压缩文件使之变小，然后将其推送至远程仓库")]),t._v(" "),e("li",[t._v("示例输出表示创建了一个新分支 "),e("code",[t._v("[new branch]")]),t._v("，后面是表示本地分支推送到远程仓库的分支 "),e("code",[t._v("master -> master")])])]),t._v(" "),e("p",[t._v("⚠️ 远程仓库的 URL 包含项目所在帐户的用户名，而该用户名为仓库的所有者，提交 "),e("code",[t._v("push")]),t._v(" 到该仓库需要提供该用户名和相应密码才有权限对远程仓库进行修改")]),t._v(" "),e("p",[e("img",{attrs:{src:v(768),alt:"推送到远程仓库-2"}})]),t._v(" "),e("p",[e("img",{attrs:{src:v(769),alt:"跟踪分支"}})]),t._v(" "),e("p",[t._v("当把本地 commit 推送到远程仓库后，会出现跟踪分支（其名称由远程仓库的简写名及分支名称组成），以跟踪（同步）远程仓库中的相应分支。示例中的跟踪分支表示当前远程仓库 "),e("code",[t._v("origin")]),t._v(" 有一个 "),e("code",[t._v("master")]),t._v(" 分支指向 commit "),e("code",[t._v("d2227cc")]),t._v("（"),e("strong",[t._v("并包含 "),e("code",[t._v("d2227cc")]),t._v(" 前的所有 commit "),e("strong",[t._v("），这意味着可以在本地仓库跟踪远程仓库的信息。但需要注意的一点是，这个跟踪分支并")]),t._v("不能实时表现")]),t._v("在远程仓库上的位置。如果我们之外的其他人对远程仓库做了更改，我们本地仓库中的跟踪分支不会移动，必须告诉它检查更新/同步"),e("strong",[t._v("它才会")]),t._v("移动。")]),t._v(" "),e("h2",{attrs:{id:"查看远程仓库"}},[t._v("查看远程仓库")]),t._v(" "),e("p",[t._v("推送 commit 至远程仓库后，Github 会在项目主页显示关于仓库的信息可供查阅。GitHub 有一个很棒的功能，即它会"),e("strong",[t._v("自动显示 README 文件的内容")]),t._v("。")]),t._v(" "),e("p",[e("img",{attrs:{src:v(770),alt:"Github 项目主页"}})]),t._v(" "),e("p",[t._v("该示例中的 GitHub 显示当前仓库中有一个个 commit、一个分支、一名贡献者")]),t._v(" "),e("h2",{attrs:{id:"从远处仓库拉取修改"}},[t._v("从远处仓库拉取修改")]),t._v(" "),e("p",[t._v("当远程仓库上存在一些 commit ，但我们的本地仓库上没有这些 commit ，为了将与远程仓库上的更改同步，需要使用命令 "),e("code",[t._v("git pull <remote-shortname> <branch>")]),t._v(" 同步"),e("strong",[t._v("远程")]),t._v("仓库与"),e("strong",[t._v("本地")]),t._v("仓库，与命令 "),e("code",[t._v("git push")]),t._v(" 类似，但是方向相反，拉取远程仓库的 commit 到本地并与本地分支合并。")]),t._v(" "),e("p",[t._v("检索 origin 远程仓库 master 分支中的 commit 并将。")]),t._v(" "),e("p",[e("img",{attrs:{src:v(771),alt:"从远程仓库拉取修改"}})]),t._v(" "),e("ul",[e("li",[t._v("远程分支上的 commit 会被复制到本地仓库")]),t._v(" "),e("li",[t._v("本地跟踪分支 "),e("code",[t._v("origin/master")]),t._v(" 移到指向最新的 commit")]),t._v(" "),e("li",[t._v("本地跟踪分支 "),e("code",[t._v("origin/master")]),t._v(" 合并到本地分支 master")]),t._v(" "),e("li",[t._v("输出 "),e("code",[t._v("fast-forward")]),t._v(" 表示 Git 进行了"),e("strong",[t._v("快进合并")]),t._v("，并输出类似于 "),e("code",[t._v("git --stat")]),t._v(" 的信息，显示更改的文件及添加或删除了多少行")])]),t._v(" "),e("p",[t._v("命令 "),e("code",[t._v("git fetch <remote-shortname> <branch>")]),t._v("  也可以从远程仓库分支检索 commit 并下载到本地，但"),e("strong",[t._v("不会")]),t._v("自动将本地分支与远程跟踪分支"),e("strong",[t._v("合并")]),t._v("。只是将跟踪分支指向最新的 commit，而当前分支并不移动。使用 "),e("code",[t._v("git fetch")]),t._v(" 而不是 "),e("code",[t._v("git pull")]),t._v(" 的一个主要情形是当你的远程分支和本地分支都拥有对方所没有的更改时，直接合并会出现合并冲突。可以将 "),e("code",[t._v("git fetch")]),t._v(" 想象成 "),e("code",[t._v("git pull")]),t._v(" 它的一半操作，先获取远程更改，将它们存储到本地分支中，然后再使用命令 "),e("code",[t._v("git merge <branch>")]),t._v("手动执行合并。")]),t._v(" "),e("p",[t._v("🎦 "),e("a",{attrs:{href:"https://www.jianguoyun.com/p/DajSvLgQjNDGBxjS-uAD",target:"_blank",rel:"noopener noreferrer"}},[t._v("git fetch 演示视频"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"fork-仓库"}},[t._v("fork 仓库")]),t._v(" "),e("p",[t._v("在版本控制术语中，fork 一个仓库是指复制它。当你 fork 仓库时会创建与原始仓库完全相同的副本，新副本也是一个远程仓库，并将该副本移动到你的帐户，你对 fork 的仓库拥有完全控制权（与之相对应的是克隆，克隆仓库发生在本地计算机上，将远程仓库复制到本地，获得完全一样的仓库副本）。")]),t._v(" "),e("p",[t._v("fork 项目后你的 GitHub 配置文件名称旁边会显示新的项目名称。此外，名称下面还会说明原始项目所在的位置。可以 fork GitHub 上的任何公共仓库，并对获得的副本拥有完全控制权。")]),t._v(" "),e("p",[e("img",{attrs:{src:v(772),alt:"fork 仓库"}})]),t._v(" "),e("ul",[e("li",[t._v("fork 并非 Git 子命令")]),t._v(" "),e("li",[t._v("修改 fork 的仓库不会更改原始仓库")])]),t._v(" "),e("h2",{attrs:{id:"查看其他开发者的-commit"}},[t._v("查看其他开发者的 commit")]),t._v(" "),e("p",[t._v("在与他人开发者协作时，使用命令 "),e("code",[t._v("git shortlog")]),t._v(" 按作者对 commit 分组排序列出所有提交。还可以设置选项 "),e("code",[t._v("-s")]),t._v(" 仅显示 commit 的数量，设置选项 "),e("code",[t._v("-n")]),t._v(" 按数量排序（而不是按作者姓名的字母顺序）。")]),t._v(" "),e("p",[e("img",{attrs:{src:v(773),alt:"git shortlog 按开发者分组列出提交"}})]),t._v(" "),e("p",[e("img",{attrs:{src:v(774),alt:"git shortlog 按提交数量排序"}})]),t._v(" "),e("p",[t._v("命令 "),e("code",[t._v("git log")]),t._v(" 设置不同的选项可按不同需求查询 commit")]),t._v(" "),e("ul",[e("li",[t._v("设置选项 "),e("code",[t._v("--author=name")]),t._v(" 筛选作者名称与 "),e("code",[t._v("name")]),t._v(" 相匹配所有的 commit")]),t._v(" "),e("li",[t._v("设置选项 "),e("code",[t._v("--grep key_word")]),t._v(" 或 "),e("code",[t._v("--grep=key_word")]),t._v(" 筛选提交信息与关键字 "),e("code",[t._v("key_word")]),t._v(" 相匹配的所有 commit（💡Grep 是一个模式匹配工具💡，如运行 "),e("code",[t._v('git log --grep "fort"')]),t._v(" 则 Git 将显示顺序包含字符 "),e("code",[t._v("f")]),t._v("、"),e("code",[t._v("o")]),t._v("、"),e("code",[t._v("r")]),t._v("、"),e("code",[t._v("t")]),t._v(" 的 commit，可能是一个单词，也可能是单词里的一个片段相匹配即可 ）")])]),t._v(" "),e("p",[t._v("⚠️ 空格是查询时的一个问题，如果尝试搜索包含多个词且单词之间有空格的作者或内容，则需要将空格也包含在引号内。例如，要搜索 "),e("code",[t._v("unit tests")]),t._v("，你需要使用以下命令 "),e("code",[t._v('git log --grep="unit tests"')])]),t._v(" "),e("h2",{attrs:{id:"拉取请求pull-request"}},[t._v("拉取请求Pull Request")]),t._v(" "),e("p",[t._v("拉取请求 Pull Request 是向初始或源仓库的维护者发出的请求，以让其将你在他们项目的 fork 上所做的更改应用在他们的项目中。你请求他们拉取你做的更改。")]),t._v(" "),e("p",[t._v("要创建 Pull Request，你需要完成一些操作：")]),t._v(" "),e("ul",[e("li",[t._v("你必须 fork 源仓库")]),t._v(" "),e("li",[t._v("将你的 fork 克隆到你的计算机")]),t._v(" "),e("li",[t._v("进行一些 commit（最好是在特性分支上！）")]),t._v(" "),e("li",[t._v("将 commit 推送回你的 fork")]),t._v(" "),e("li",[t._v("创建一个新的 Pull Request，并选择包含你的新 commit 的分支。")])]),t._v(" "),e("p",[t._v("🎦 "),e("a",{attrs:{href:"https://www.jianguoyun.com/p/DSSbTUkQjNDGBxjP-uAD",target:"_blank",rel:"noopener noreferrer"}},[t._v("创建 Pull Request"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[t._v("当创建一个 Pull Request 时，要将所有更改放在一个专用于这些更改的特性分支上")]),t._v(" "),e("li",[t._v("查看 GitHub 中的 Conversation 对话选项卡，可以与项目维护者进行沟通，以明确他们希望你做什么")]),t._v(" "),e("li",[t._v("如果需要更改 Pull Request 一般按照以下步骤\n"),e("ul",[e("li",[t._v("在你的 Pull Request 所基于的本地仓库的同一分支上添加一些必要 commit")]),t._v(" "),e("li",[t._v("将该分支推送到你的源仓库 fork 副本")])])])]),t._v(" "),e("h2",{attrs:{id:"与源项目保持同步"}},[t._v("与源项目保持同步")]),t._v(" "),e("h3",{attrs:{id:"star"}},[t._v("Star")]),t._v(" "),e("p",[t._v("在仓库主页点击 Star 按钮可收藏该项目，Star 是能帮助你跟踪感兴趣仓库的一个有用功能，同时也成为了衡量仓库受欢迎程度的手段。但是如果想实时跟进仓库的发展就不行了，你得手动前往收藏页面查看仓库，以检查它们是否发生变化。")]),t._v(" "),e("h3",{attrs:{id:"watch"}},[t._v("Watch")]),t._v(" "),e("p",[t._v("如果你要跟进一个项目的变化，并希望接收变更通知，GitHub 为你提供了 Watch 按钮以关注该仓库。这样当该仓库发生任何活动时，GitHub 都会通知你，例如当有人向仓库推送变更，创建了新的 Issues，或者在现有 Issues 中添加了评论。")]),t._v(" "),e("p",[e("img",{attrs:{src:v(775),alt:"Watching 仓库"}})]),t._v(" "),e("h2",{attrs:{id:"加入源仓库更改"}},[t._v("加入源仓库更改")]),t._v(" "),e("p",[t._v("假使源仓库开始对项目进行更改了（而 fork 中不会获得这些更改），为了本地克隆仓库保持同步，需要将源仓库的项目添加为额外远程仓库以便保持同步。使用命令 "),e("code",[t._v("git remote add")]),t._v(" 命令向本地仓库添加一个新的简写名（一般使用 "),e("code",[t._v("upstream")]),t._v(" 表示引用源仓库）和 URL，将与源仓库之间建立连接。")]),t._v(" "),e("p",[e("img",{attrs:{src:v(776),alt:"添加引用源仓库链接"}})]),t._v(" "),e("p",[t._v("接着使用命令 "),e("code",[t._v("git pull <remote-shortname> <branch>")]),t._v(" 或 "),e("strong",[e("code",[t._v("git fetch <remote-shortname> <branch>")]),t._v("（推荐使用）")]),t._v(" 获得上游远程仓库的更改，注意简写名应使用引用源仓库的简写名")]),t._v(" "),e("p",[e("img",{attrs:{src:v(777),alt:"拉取上游变更-1"}}),t._v("\n从上游远程仓库获取了所有更改，并存放于本地仓库的新分支 "),e("code",[t._v("upstream/master")]),t._v("之中")]),t._v(" "),e("p",[e("img",{attrs:{src:v(778),alt:"拉取上游变更-2"}})]),t._v(" "),e("p",[t._v("本地仓库中多出了 "),e("code",[t._v("upstream/master")]),t._v(" 跟踪分支，该分支跟踪"),e("strong",[t._v("源仓库")]),t._v(" master 分支的位置，即获取对源仓库的master 分支所做的更改")]),t._v(" "),e("p",[t._v("一般需要将源仓库的更新合并到本地分支默认分支，以便在默认分支上的开发环境是与源仓库同步的，使用命令 "),e("code",[t._v("git merge <branch_name>")]),t._v("。同样为了保持 fork 仓库也进行同步，最后把本地整合了最新更新的分支 push 到远程仓库")]),t._v(" "),e("p",[e("img",{attrs:{src:v(779),alt:"拉取上游更新-3"}})])])}),[],!1,null,null,null);_.default=r.exports},763:function(t,_,v){t.exports=v.p+"assets/img/20191126224140485_9392.bb9f9dd4.png"},764:function(t,_,v){t.exports=v.p+"assets/img/20191126224204894_23714.12ecee18.png"},765:function(t,_,v){t.exports=v.p+"assets/img/20191126224417421_27727.0683c57a.png"},766:function(t,_,v){t.exports=v.p+"assets/img/20191126224444372_3992.6b24c3ba.png"},767:function(t,_,v){t.exports=v.p+"assets/img/20191126224503586_27347.78063586.png"},768:function(t,_,v){t.exports=v.p+"assets/img/20191126224528394_5005.c91d4efa.png"},769:function(t,_,v){t.exports=v.p+"assets/img/20191126224544533_3339.f02feb60.png"},770:function(t,_,v){t.exports=v.p+"assets/img/20191126224601721_7357.e22b06af.png"},771:function(t,_,v){t.exports=v.p+"assets/img/20191126224628521_13204.080e4ff8.png"},772:function(t,_,v){t.exports=v.p+"assets/img/20191126232329897_21199.98eab72b.png"},773:function(t,_,v){t.exports=v.p+"assets/img/20191127104911079_15340.e61c68d0.png"},774:function(t,_,v){t.exports=v.p+"assets/img/20191127105946592_26130.2312a88f.png"},775:function(t,_,v){t.exports=v.p+"assets/img/20191127123954887_18541.dcf5e0b7.png"},776:function(t,_,v){t.exports=v.p+"assets/img/20191127153247953_17635.7c87fa04.png"},777:function(t,_,v){t.exports=v.p+"assets/img/20191127153345048_3410.d5cbceeb.png"},778:function(t,_,v){t.exports=v.p+"assets/img/20191127153405969_25196.21f9d7ce.png"},779:function(t,_,v){t.exports=v.p+"assets/img/20191127154519620_1244.06a5647b.png"}}]);