(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{1275:function(t,s,a){"use strict";a.r(s);var e=a(18),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"sql-数据清理"}},[t._v("SQL 数据清理")]),t._v(" "),e("h1",{attrs:{id:"数据清理"}},[t._v("数据清理")]),t._v(" "),e("p",[t._v("原始的数据结构或内容可能并不适合直接进行分析，SQL 提供了许多内置的函数对数据进行清理，如提取部分数据、数据类型转换、处理 "),e("code",[t._v("NULL")]),t._v(" 等。")]),t._v(" "),e("h2",{attrs:{id:"left、right、length"}},[t._v("LEFT、RIGHT、LENGTH")]),t._v(" "),e("p",[t._v("函数 "),e("code",[t._v("LEFT")]),t._v("、"),e("code",[t._v("RIGHT")]),t._v("、"),e("code",[t._v("LENGTH")]),t._v(" 可用于从特定索引位置提取子字符串")]),t._v(" "),e("ul",[e("li",[t._v("函数 "),e("code",[t._v("LEFT(col_name, num)")]),t._v(" 从起点（或左侧）开始，获取给定字段（列）"),e("code",[t._v("col_name")]),t._v(" 每行一定数量 "),e("code",[t._v("num")]),t._v(" 的字符。如使用 "),e("code",[t._v("LEFT(phone_number, 3)")]),t._v(" 获取电话号码中的前三位，一般时区号。")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("函数 "),e("code",[t._v("RIGHT(col_name, num)")]),t._v(" 从末尾（或右侧）开始，获取给定字段（列）"),e("code",[t._v("col_name")]),t._v(" 每行一定数量 "),e("code",[t._v("num")]),t._v(" 的字符。如使用 "),e("code",[t._v("RIGHT(phone_number, 8)")]),t._v(" 获取电话号码的最后 8 位。")])]),t._v(" "),e("li",[e("p",[t._v("函数 "),e("code",[t._v("LENGTH(col_name)")]),t._v(" 获取给定字段（列）"),e("code",[t._v("col_name")]),t._v(" 每行的字符数。如 "),e("code",[t._v("LENGTH(phone_number)")]),t._v(" 得出每个电话号码的字符长度。")])])]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 选择网址 URL 最后 3 个字符，即域名")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("website"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" domain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" num_companies\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" accounts\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("💡 函数 "),e("code",[t._v("LEFT")]),t._v("、"),e("code",[t._v("RIGHT")]),t._v(" 等一般针对字符串数据，但是也可以操作数字或日期类型的数据，系统会将它们转换为字符串。")]),t._v(" "),e("h2",{attrs:{id:"postion、strpos"}},[t._v("POSTION、STRPOS")]),t._v(" "),e("p",[t._v("函数 "),e("code",[t._v("POSTION")]),t._v(" 或 "),e("code",[t._v("STRPOS")]),t._v(" 用于获取特定（子）字符在字符串中的索引，如 "),e("code",[t._v("POSITION(',' IN city_state)")]),t._v(" 获取字段（列） "),e("code",[t._v("city_state")]),t._v(" 每一行字符串中逗号 "),e("code",[t._v(",")]),t._v(" 的索引位置。")]),t._v(" "),e("p",[e("code",[t._v("STRPOS")]),t._v(" 和 "),e("code",[t._v("POSITION")]),t._v(" 提供的结果相同，但是语法不太一样，前面的示例使用 "),e("code",[t._v("STRPOS")]),t._v(" 函数就是 "),e("code",[t._v("STRPOS(city_state, ‘,’)")])]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 原始数据在字段 primary_poc 存储了名字，名字和姓氏之间用空格分隔")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用 POSITION(' ' IN primary_poc) 取得空格的索引")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用 LEFT 提取姓氏")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用 RIGHT 提取名字")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" primary_poc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primary_poc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" POSITION"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" primary_poc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" first_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primary_poc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LENGTH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primary_poc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" POSITION"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" primary_poc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" last_name\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" accounts\n")])])]),e("p",[t._v("⚠️ 在 SQL 中第一个位置的索引是 1，而很多编程语言的索引是从 0 开始。")]),t._v(" "),e("p",[t._v("💡 函数 "),e("code",[t._v("POSITION")]),t._v(" 和 "),e("code",[t._v("STRPOS")]),t._v(" 查询的是字符的索引，而"),e("strong",[t._v("字符需要区分大小写")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"lower、upper"}},[t._v("LOWER、UPPER")]),t._v(" "),e("p",[t._v("使用函数 "),e("code",[t._v("LOWER（col_name)")]),t._v(" 或 "),e("code",[t._v("UPPER(col_name)")]),t._v(" 让给定字段（列）中所有字符变成小写或大写。")]),t._v(" "),e("h2",{attrs:{id:"concat"}},[t._v("CONCAT")]),t._v(" "),e("p",[t._v("函数 "),e("code",[t._v("CONCAT")]),t._v(" 将给定的字段（列）的值组合在一起形成新的列，也可以为每一个都添加相同的数据形成特定的格式，如 "),e("code",[t._v("CONCAT(first_name, ' ', last_name)")]),t._v(" 将存储在不同列中的名字和姓氏组合到一起形成全名，中间用空格 "),e("code",[t._v("' '")]),t._v(" 分隔。")]),t._v(" "),e("p",[t._v("💡 可以使用管道字符 "),e("code",[t._v("||")]),t._v(" 执行不同字段数据的连接，如上述示例用管道字符实现方式为 "),e("code",[t._v("first_name || ' ' || last_name")])]),t._v(" "),e("h2",{attrs:{id:"replace"}},[t._v("REPLACE")]),t._v(" "),e("p",[t._v("使用函数  "),e("code",[t._v("replace(string_text, from raw_text, to new_text)")]),t._v(" 将给定的字段（列）的值 "),e("code",[t._v("string_text")]),t._v(" 中的匹配的部分 "),e("code",[t._v("raw_text")]),t._v(" 替换成 "),e("code",[t._v("new_text")])]),t._v(" "),e("h2",{attrs:{id:"cast"}},[t._v("CAST")]),t._v(" "),e("p",[t._v("函数 "),e("code",[t._v("CAST(expression AS target_type)")]),t._v(" "),e("a",{attrs:{href:"https://www.postgresqltutorial.com/postgresql-cast/",target:"_blank",rel:"noopener noreferrer"}},[t._v("将数据转换为指定的数据类型"),e("OutboundLink")],1),t._v("，如将字符串转换为数值或日期（但字符串的值应该是 sql 可理解的）"),e("code",[t._v("CAST(date_column AS DATE)")]),t._v(" 💡 可以使用简写方式 "),e("code",[t._v("date_column::DATE")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(786),alt:"CAST"}})]),t._v(" "),e("h2",{attrs:{id:"coalesce"}},[t._v("COALESCE")]),t._v(" "),e("p",[t._v("函数 "),e("code",[t._v("COALESCE(val1, val2, ...., val_n)")]),t._v(" 返回的是的第一个非 "),e("code",[t._v("NULL")]),t._v(" 值，如果函数内的所有参数都为空值，则返回 "),e("code",[t._v("NULL")]),t._v("，可以使用这个特性将给定字段（列）中的空值替换为特定值")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 由于使用左连接组合表格，因此查询获得的表格可能出现 NULL 单元格")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 使用 COALESCE 函数将字段 total_amt_usd 为 NULL 的单元格替换为 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COALESCE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("total_amt_usd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" total_amt_usd\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" accounts a\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" orders o\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("account_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=_.exports},786:function(t,s,a){t.exports=a.p+"assets/img/20200607123145017_28092.f2039dc9.png"}}]);