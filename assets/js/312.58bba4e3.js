(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{1405:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"作用域"}},[t._v("作用域")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"http://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Todd Motto 撰写的"),a("OutboundLink")],1),t._v("入门材料。")]),t._v(" "),a("p",[t._v("作用域是限制访问变量或函数的区域。在 JacvaScript 中变量有"),a("strong",[t._v("三种")]),t._v("作用域 Scope：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("全局作用域")]),t._v("：所有函数之外定义的标识符，可以在程序中任何位置被访问，即全局可用")]),t._v(" "),a("li",[a("strong",[t._v("函数作用域")]),t._v("：在函数内部定义的标识符，仅可在该函数内部的所有位置可见。使用函数名称或变量名称定义函数时，函数内部也可以引用该函数或变量名称，即自引用。")]),t._v(" "),a("li",[a("strong",[t._v("块作用域（默认不含有块作用域）")]),t._v("：使用关键字 "),a("code",[t._v("var")]),t._v(" 在代码块中，如 "),a("code",[t._v("if")]),t._v(" 或循环代码块（代码块用花括号 "),a("code",[t._v("{ }")]),t._v(" 表示）中，创建的变量可以在块代码之外访问，即不会该变量不会创建块作用域。可以使用 "),a("code",[t._v("let")]),t._v(" 和 "),a("code",[t._v("const")]),t._v("（而非 "),a("code",[t._v("var")]),t._v(" ）声明变量，将变量作用域限制到"),a("strong",[t._v("块")]),t._v("，从而避免在函数中的内嵌代码块内声明的变量被"),a("strong",[t._v("提升")]),t._v("到函数作用域顶部。")])]),t._v(" "),a("p",[t._v("🎦 "),a("a",{attrs:{href:"https://www.jianguoyun.com/p/Dab9nV0QjNDGBxiL--AD",target:"_blank",rel:"noopener noreferrer"}},[t._v("变量或函数定义的提升"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("提升 hoisting 是浏览器解析 JavaScript 的结果，即在执行任何 JavaScript 代码之前，所有变量或函数的声明都会被「提升」到其作用域的顶部，这改变了声明的位置和顺序（而 JavaScript 运行代码是依次从上到下执行的），例如在提升变量时只是提升了变量的声明，而赋值语句未被提升，可能会造成难以理解的输出。为了"),a("RouterLink",{attrs:{to:"d:/Front_end/JavaScript/变量.html"}},[t._v("避免提升")]),t._v("可使用 "),a("code",[t._v("let")]),t._v(" 或 "),a("code",[t._v("const")]),t._v(" 定义变量。"),a("strong",[t._v("同时为保证语法和行为相互一致，请在脚本的顶部声明函数、在函数顶部声明变量")]),t._v("。")],1),t._v(" "),a("li",[t._v("函数定义的不同方式，其提升的方式不同\n"),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("function functionName()")]),t._v(" 语法声明函数时，函数声明和定义（函数里的实际说明）同时提升到作用域的顶部")]),t._v(" "),a("li",[t._v("使用变量 "),a("code",[t._v("var functionName = function()")]),t._v(" 定义匿名函数时，只有函数的声明（例如 "),a("code",[t._v("var functionName")]),t._v("）提升到作用域的顶部")])])])]),t._v(" "),a("h2",{attrs:{id:"块级作用域"}},[t._v("块级作用域")]),t._v(" "),a("p",[t._v("在 JavaScript 的代码块，如 if 语句或循环语句块中，使用"),a("strong",[t._v("关键字 "),a("code",[t._v("var")])]),t._v(" 创建的变量不包含块级作用域，与 Python 语法不同，在代码块中创建的变量，在代码块外部仍可访问。若需要将变量作用域限制在"),a("strong",[t._v("块")]),t._v("，可使用关键字 "),a("code",[t._v("let")]),t._v(" 或 "),a("code",[t._v("const")]),t._v(" 创建变量")]),t._v(" "),a("p",[t._v("示例")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outsideExample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outsideExample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outsideExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outsideExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("🔨")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Second string\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Second string\n")])])]),a("h2",{attrs:{id:"覆盖"}},[t._v("覆盖")]),t._v(" "),a("p",[t._v("全局作用域的变量在函数中进行了修改，会覆盖掉全局作用域定义的变量值。若要避免全局作用域的变量出现覆盖/遮蔽，可在函数中进行"),a("strong",[t._v("重新声明变量（使用 "),a("code",[t._v("var")]),t._v(" 关键字），以创建一个仅作用于函数作用域的变量（即时该变量名称与全局作用域中定义的名称一致）")]),t._v("，而未使用关键字 "),a("code",[t._v("var")]),t._v(" 创建并赋值的变量，其作用域大于函数作用域，当函数外部存在同名变量，可能因此引起覆盖或其他异常。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outsideExample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outsideExample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outsideExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("🔨")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" First string\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outsideExample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    outsideExample "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outsideExample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("🔨")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Second string\n")])])]),a("h2",{attrs:{id:"闭包"}},[t._v("闭包")]),t._v(" "),a("p",[t._v("指通过特定的方式，在函数运行结束后，在其中创建的变量或函数（作用域）仍可（通过外部）访问。保留函数（或变量）访问权有多种方式：")]),t._v(" "),a("ul",[a("li",[t._v("将在该作用域创建的变量或函数传递到函数 "),a("code",[t._v("setTimeout")])]),t._v(" "),a("li",[t._v("将在该作用域创建的函数或变量作为返回值")]),t._v(" "),a("li",[t._v("将在该作用域创建的函数或变量保存（赋值）到全局变量中")])]),t._v(" "),a("p",[t._v("注意：闭包将函数内创建的属性或方法赋值给全局变量，此时储存的值在函数运行结束后仍然可以访问，"),a("strong",[t._v("但是如果函数再次运行")]),t._v("则此时的全局变量指向的值（在函数内部创建的属性或方法）则会改变。由于每次调用函数都会生成一个新的临时函数作用域，里面的属性和方法也是重新创建。")])])}),[],!1,null,null,null);s.default=e.exports}}]);