(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{1233:function(t,s,a){"use strict";a.r(s);var n=a(18),_=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"类与对象"}},[t._v("类与对象")]),t._v(" "),n("p",[t._v("面向对象的编程思想力图在程序中对事物的描述与现实中的形态保持一致，其中有两个重要概念是类与对象：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("类")]),t._v("：对某一类事物的抽象描述，用于描述多个对象的共同特征，它是对象的模板")]),t._v(" "),n("li",[n("strong",[t._v("对象")]),t._v("：用于表示现实中该类事物的个体，用于描述现实中的个体，它是类的实例")])]),t._v(" "),n("p",[t._v("面向对象的设计特点是"),n("strong",[t._v("模块化")]),t._v("，即实现一个功能（整体），把它拆分为多个模块去实现，最后把模块结合起来，使复杂的过程简单化。")]),t._v(" "),n("h2",{attrs:{id:"类"}},[t._v("类")]),t._v(" "),n("p",[t._v("编写"),n("strong",[t._v("类")]),t._v("时，定义一些对象都有的"),n("strong",[t._v("通用行为和属性")]),t._v("。基于类创建对象时，每个对象都自动具备这种通用属性和行为：")]),t._v(" "),n("ul",[n("li",[t._v("方法：类中的"),n("strong",[t._v("函数")])]),t._v(" "),n("li",[t._v("属性：通过实例访问的"),n("strong",[t._v("变量")])])]),t._v(" "),n("h3",{attrs:{id:"创建类"}},[t._v("创建类")]),t._v(" "),n("p",[t._v("使用关键字 "),n("code",[t._v("class")]),t._v(" 创建类，类似于创建函数，使用复合语句。类名使用驼峰 CamelCase 命名风格，每个单词"),n("strong",[t._v("首字母大写")])]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义类级别的变量/属性")]),t._v("\n    scientific_name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Canis lupus familiaris"')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义实例级别变量，该方法在创建实例时自动运行，且需要传递一个实参")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("speak")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Woof!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("ul",[n("li",[t._v("在定义类方法时"),n("strong",[t._v("第一个形参")]),t._v("十分特殊，一般命名为 "),n("code",[t._v("self")]),t._v("（也可以命名为其他）指代对象本身。创建实例时，类的方法的第一个形参 "),n("code",[t._v("self")]),t._v(" 的"),n("strong",[t._v("实参自动传入")]),t._v("（用户不需要提供值），它是一个"),n("strong",[t._v("指向实例本身的引用")]),t._v("，让实例能够"),n("strong",[t._v("访问类中的属性和其他方法")]),t._v("。（"),n("code",[t._v("self")]),t._v(" 扮演者在类中各个方法沟通唤醒的信使）")]),t._v(" "),n("li",[t._v("类似地以 "),n("code",[t._v("self")]),t._v(" 为前缀的变量可以供类中"),n("strong",[t._v("所有方法使用")]),t._v("（全局变量）")])]),t._v(" "),n("h4",{attrs:{id:"类级别属性"}},[t._v("类级别属性")]),t._v(" "),n("p",[t._v("在类定义中设置的变量（预设变量值），可以适用于所有实例，即所有依据该类创建的对象，该变量的变量值都相同。")]),t._v(" "),n("h4",{attrs:{id:"实例级别变量"}},[t._v("实例级别变量")]),t._v(" "),n("p",[t._v("在实例创建时才同步创建的变量（一般使用传递的实参作为变量值），不同对象都有专属的变量值。")]),t._v(" "),n("p",[t._v("💡 对于在方法中创建的变量，可以赋值给 "),n("code",[t._v("self")]),t._v(" 前缀的变量，使局部变量成为实例级别的属性")]),t._v(" "),n("h4",{attrs:{id:"特殊方法-init"}},[t._v("特殊方法 "),n("code",[t._v("__init__()")])]),t._v(" "),n("p",[t._v("方法 "),n("code",[t._v("__init__()")]),t._v(" 是一个特殊的方法（双下划线，"),n("strong",[t._v("Dunder 方法")]),t._v("），其中 "),n("code",[t._v("init")]),t._v(" 表示初始化，即该方法在创建实例时会"),n("strong",[t._v("自动运行")]),t._v("（而类中的其他方法需要在实例建立后，用户主动调用时才运行）")]),t._v(" "),n("ul",[n("li",[t._v("方法 "),n("code",[t._v("__init()__")]),t._v(" 一般在该方法中初始化新对象的一些参数值")]),t._v(" "),n("li",[t._v("方法 "),n("code",[t._v("__init__()")]),t._v(" 创建实例时并未显式地包含 return 语句，但是 python 会自动返回一个实例，因此需要将实例存储在变量中")]),t._v(" "),n("li",[t._v("方法"),n("code",[t._v("__init__()")]),t._v(" 定义中的形参 "),n("code",[t._v("self")]),t._v(" 必不可少，且必须位于第一位")])]),t._v(" "),n("h2",{attrs:{id:"对象"}},[t._v("对象")]),t._v(" "),n("p",[t._v("根据类来创建对象被称为"),n("strong",[t._v("实例化")]),t._v("。创建实例后，每个实例都是"),n("strong",[t._v("独立个体")]),t._v("，即使实例输入的实参相同。因此每个实例都需要"),n("strong",[t._v("存储在不同的变量中")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"创建对象"}},[t._v("创建对象")]),t._v(" "),n("p",[t._v("创建新对象是通过调用类，类似于调用函数或方法，返回该类的新对象。根据类创建的"),n("strong",[t._v("实例名称用小写")]),t._v("。")]),t._v(" "),n("p",[t._v("⚠️ 对于自定义的类，需要在创建此类对象前，将定义该类的脚本"),n("strong",[t._v("导入")]),t._v("（不需要后缀 "),n("code",[t._v(".py")]),t._v("）")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" class_file_name\n")])])]),n("h3",{attrs:{id:"查询所属类"}},[t._v("查询所属类")]),t._v(" "),n("p",[t._v("在 Python 中判断是否为对象的方式之一是询问是否能"),n("strong",[t._v("作为变量的值")]),t._v("，如字符串、打开的文件，甚至函数都是对象。")]),t._v(" "),n("p",[t._v("查看对象是属于哪一个类，可以使用函数 "),n("code",[t._v("isinstance()")]),t._v(" 或 "),n("code",[t._v("type()")])]),t._v(" "),n("ul",[n("li",[t._v("函数 "),n("code",[t._v("isinstance()")]),t._v(" 询问特定的对象是否属于特定的类，返回 "),n("code",[t._v("True")]),t._v(" 或 "),n("code",[t._v("False")])]),t._v(" "),n("li",[t._v("函数 "),n("code",[t._v("type()")]),t._v(" 返回特定类型")])]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True 也是布尔值（类 bool）。实际上，所有布尔值也是 int。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'turtle.Turtle'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),n("h3",{attrs:{id:"访问属性"}},[t._v("访问属性")]),t._v(" "),n("p",[t._v("使用句点法，指定实例的名称和属性名称，并用句点 "),n("code",[t._v(".")]),t._v(" 分隔它们，返回属性的值")]),t._v(" "),n("h3",{attrs:{id:"调用方法"}},[t._v("调用方法")]),t._v(" "),n("p",[t._v("使用句点法，指定实例/对象的名称和方法名称，并用句点 "),n("code",[t._v(".")]),t._v(" 分隔它们；若该方法有形参，需要传递实参")]),t._v(" "),n("h2",{attrs:{id:"继承"}},[t._v("继承")]),t._v(" "),n("p",[t._v("在程序中，继承是事物之间的所属关系，即子类继承父类（或超类）。")]),t._v(" "),n("p",[t._v("继承是指在一个现有类的基础上去构建一个新的类，构建出来的新类被称作"),n("strong",[t._v("子类")]),t._v("，现有类被称作"),n("strong",[t._v("父类")]),t._v("，子类会自动拥有父类所有的属性和方法，同时可以增添属于自己专有的属性和方法，或修改父类的属性和方法。")]),t._v(" "),n("p",[t._v("继承的好处：")]),t._v(" "),n("ul",[n("li",[t._v("提高了代码的复用性")]),t._v(" "),n("li",[t._v("让类与类之间产生了关系，为多态提供了前提")])]),t._v(" "),n("p",[t._v("Python 继承类的方法是在"),n("strong",[t._v("新类定义的括号里（第一行）填入需要继承的类")])]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Husky 类继承于 Dog 类")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Husky")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dog"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加新属性，来源地")]),t._v("\n    origin "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Siberia"')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改父类方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("speak")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Awooo!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"super-函数"}},[t._v("super 函数")]),t._v(" "),n("p",[t._v("当子类使用了 "),n("code",[t._v("__init__")]),t._v(" 方法进行了专属的初始化设置时，一般需要在该方法中"),n("strong",[t._v("先调用方法 "),n("code",[t._v("super().__init__()")])])]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" turtle\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个 turtle 子类")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigOrangeTurtle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turtle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Turtle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先调用父类初始化（预初始化）")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__init__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于子类的专属初始化，修改默认颜色为橙色，线宽为 10")]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"orange"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("code",[t._v("super()")]),t._v(" 函数返回一个父类对象，"),n("code",[t._v("super().__init__()")]),t._v(" 即使用父类的 "),n("code",[t._v("__init__()")]),t._v(" 方法先进行初始化， 接着再执行剩下的语句，即针对该子类的专属初始化设置，以免因为在子类直接覆盖了父类的 "),n("code",[t._v("__init__")]),t._v(" 方法引起异常。")]),t._v(" "),n("h3",{attrs:{id:"pass-语句"}},[t._v("pass 语句")]),t._v(" "),n("p",[t._v("在定义类时希望创建一种方法但什么也不执行，"),n("code",[t._v("pass")]),t._v(" 即是什么也不执行语句，可以用在类或方法定义里（因为在 Python 里不能有不包含任何语句的函数或类），可实现"),n("strong",[t._v("占位符")]),t._v("的作用以在子类里被替换。")]),t._v(" "),n("h3",{attrs:{id:"查询所属父类"}},[t._v("查询所属父类")]),t._v(" "),n("p",[t._v("使用函数 "),n("code",[t._v("issubclass(subclass_name, parent_class_name)")]),t._v(" 查询前一类是否为后一类的子类，返回 "),n("code",[t._v("True")]),t._v(" 或 "),n("code",[t._v("False")]),t._v(" 值")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bool 类是 int 的子类")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("issubclass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n")])])]),n("p",[t._v("⚠️ 类的常见关系有两种")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Is-a")]),t._v(" 从属关系，即继承关系，如 "),n("code",[t._v("Husky")]),t._v(" 是 "),n("code",[t._v("Dog")])]),t._v(" "),n("li",[n("code",[t._v("Has-a")]),t._v(" 包含关系，即在该类中使用（包含）了另一类（但并非继承，使用了该类的实例），如 "),n("code",[t._v("Dogpark")]),t._v(" 中含有 "),n("code",[t._v("Dog")]),t._v("。这种情况需要使用 "),n("code",[t._v("import")]),t._v(" 语句导入定义另一类的脚本")])]),t._v(" "),n("p",[t._v("⚙️")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:a(615)}},[t._v("animals.py")])]),t._v(" "),n("li",[n("a",{attrs:{href:a(616)}},[t._v("dogpark.py")])])])])}),[],!1,null,null,null);s.default=_.exports},615:function(t,s,a){t.exports=a.p+"assets/python/animals.py"},616:function(t,s,a){t.exports=a.p+"assets/python/dogpark.py"}}]);