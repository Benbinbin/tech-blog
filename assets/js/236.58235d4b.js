(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{1272:function(s,t,a){"use strict";a.r(t);var n=a(18),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"sql-聚合数据"}},[s._v("SQL 聚合数据")]),s._v(" "),a("p",[s._v("使用不同的聚合函数可以针对单个字段（列）进行数据聚合分析，这些函数一般用在 "),a("code",[s._v("SELECT")]),s._v(" 语句中，从而在更整体的范围上观测数据，而不仅仅从每一行的数据去探索。")]),s._v(" "),a("p",[s._v("⚠️ "),a("strong",[s._v("聚合函数只能垂直聚合，即聚合列的值")]),s._v("。如果你想对行进行计算，可以使用"),a("a",{attrs:{href:"https://community.modeanalytics.com/sql/tutorial/sql-operators/#arithmetic-in-sql",target:"_blank",rel:"noopener noreferrer"}},[s._v("简单算术表达式"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"count"}},[s._v("COUNT")]),s._v(" "),a("p",[s._v("聚合函数 "),a("code",[s._v("COUNT(col_name)")]),s._v(" 统计给定字段（单列）的非空值的数量（行数），可以用来快速判断某个字段中是否缺少数据。")]),s._v(" "),a("p",[s._v("💡 如果使用通配符 "),a("code",[s._v("*")]),s._v(" 则一般返回表格行数（因为表格一般很少存在所有字段都为空 "),a("code",[s._v("NULL")]),s._v(" 的行）")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("accounts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" id_count\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" accounts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" accounts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"sum"}},[s._v("SUM")]),s._v(" "),a("p",[s._v("聚合函数 "),a("code",[s._v("SUM(col_name)")]),s._v(" 对给定字段的数值求和，该列的数据类型需要时数值，而且将忽略 "),a("code",[s._v("NULL")]),s._v(" 值")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("poster_qty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" post_qty\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders\n")])])]),a("h2",{attrs:{id:"avg"}},[s._v("AVG")]),s._v(" "),a("p",[s._v("聚合函数 "),a("code",[s._v("AVG(col_name)")]),s._v(" 对给定字段的数值求平均值，即列中所有的值之和除以列中值的数量。该列的数据类型需要时数值，该聚合函数同样会忽略分子和分母中的 "),a("code",[s._v("NULL")]),s._v(" 值。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("standard_qty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" mean_standard\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"min-与-max"}},[s._v("MIN 与 MAX")]),s._v(" "),a("p",[s._v("聚合函数 "),a("code",[s._v("MIN(col_name)")]),s._v(" 或 "),a("code",[s._v("MAX(col_name)")]),s._v(" 分别对给定字段里的最小或最大的数值，聚合函数会忽略 "),a("code",[s._v("NULL")]),s._v(" 值。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 最早的订单")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("occurred_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("💡 从功能上来说 "),a("code",[s._v("MIN")]),s._v(" 和 "),a("code",[s._v("MAX")]),s._v(" 与 "),a("code",[s._v("COUNT")]),s._v(" 相似，它们都可以用在非数字列上。"),a("code",[s._v("MIN")]),s._v(" 将返回最小的数字、最早的日期或按字母表排序的最之前的非数字值，具体取决于列类型。"),a("code",[s._v("MAX")]),s._v(" 则正好相反，返回的是最大的数字、最近的日期，或与“Z”最接近（按字母表顺序排列）的非数字值。")]),s._v(" "),a("h2",{attrs:{id:"case"}},[s._v("CASE")]),s._v(" "),a("p",[s._v("语句 "),a("code",[s._v("CASE END")]),s._v(" 用于创建一个派生列，类似于直接在选择语句通过算术运算创造派生列，CASE 语句也是位于 "),a("code",[s._v("SELECT")]),s._v(" 语句中，但不同的是结合语句 "),a("code",[s._v("WHEN conditional statement THEN value")]),s._v(" 可以特定的条件 "),a("code",[s._v("conditional statement")]),s._v(" 在新建的字段中使用相应的值。")]),s._v(" "),a("p",[s._v("⚠️ CASE 语句至少有一对 WHEN-THEN（可以使用多个 WHEN 语句，以便匹配多种情况），在其中使用条件运算符编写条件语句，如 "),a("code",[s._v("WHERE")]),s._v("，可以使用 "),a("code",[s._v("AND")]),s._v(" 和 "),a("code",[s._v("OR")]),s._v(" 连接多个条件语句；语句 "),a("code",[s._v("ELSE")]),s._v(" 是可选组成部分，用来包含不符合上述任一 CASE 条件的情况。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 派生列 unit_price 由字段 standard_amt_usd 的值除以字段 standard_qty 的值产生")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 对字段 standard_qty 的值进行判断，如果为 0 或 NULL 就返回 0，避免除数为 0 引起运算错误")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" account_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" standard_qty "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" standard_qty "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" standard_amt_usd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("standard_qty "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" unit_price\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"group-by"}},[s._v("GROUP BY")]),s._v(" "),a("p",[s._v("聚合语句 "),a("code",[s._v("GROUP BY")]),s._v(" 可以用来对数据的子集进行聚合，即基于给定字段（列）的值进行分类，然后就可以获得表格的子集，以便在更细的颗粒度上对数据进行分析。")]),s._v(" "),a("p",[s._v("⚠️ 当我们使用聚合行数对数据进行分析时，如果在 "),a("code",[s._v("SELECT")]),s._v(" 语句中有任何一个字段（列）不在聚合函数中，则必须在 "),a("code",[s._v("GROUP BY")]),s._v(" 条件中，以表示基于该字段先进行分类，再对获得的各个数据子集进行聚合分析。"),a("code",[s._v("GROUP BY")]),s._v(" 语句始终在语句 "),a("code",[s._v("WHERE")]),s._v("（之后） 和 "),a("code",[s._v("ORDER BY")]),s._v(" 之间。")]),s._v(" "),a("p",[s._v("💡 可以同时基于多个字段（列）进行"),a("strong",[s._v("分组")]),s._v("，这样就可以获得更精细颗粒度的聚合结果。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看在 web_events 表格中每个销售代表使用特定渠道的次数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" num_events\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" accounts a\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" web_events w\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("account_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" sales_reps s\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sales_rep_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("channel\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" num_events "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"distinct"}},[s._v("DISTINCT")]),s._v(" "),a("p",[s._v("语句 "),a("code",[s._v("DISTINCT")]),s._v(" 仅返回表格中（多个）特定字段（列）的唯一值的数据，类似于聚类（但并不需要聚类函数返回相应的值）。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 使用 DISTINCT 检查是否有任何客户与多个区域相关联")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" accounts a\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" sales_reps s\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sales_rep_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" region r\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("region_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 如果每个客户与多个区域相关联，则上一个查询返回的行数应该比以下查询的多")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" accounts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"having"}},[s._v("HAVING")]),s._v(" "),a("p",[s._v("语句 "),a("code",[s._v("HAVING")]),s._v(" 是过滤被聚合后的数据，相当于对通过聚合产生的数据执行 "),a("code",[s._v("WHERE")]),s._v(" 语句再进行筛选。")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看管理超过 5 个客户的销售代表")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name salesman"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" client_counts\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" sales_reps s\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" accounts a\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sales_rep_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" salesman\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" client_counts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("⚠️ 由于语句 "),a("code",[s._v("HAVING")]),s._v(" 是过滤被聚合后的数据，因此它必须在语句 "),a("code",[s._v("GROUP BY")]),s._v(" 之后使用。")])])}),[],!1,null,null,null);t.default=e.exports}}]);