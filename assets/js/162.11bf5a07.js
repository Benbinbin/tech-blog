(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{1067:function(t,v,e){t.exports=e.p+"assets/img/20200528233834818_11850.c8eda652.png"},1423:function(t,v,e){"use strict";e.r(v);var _=e(18),s=Object(_.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"数据类型"}},[t._v("数据类型")]),t._v(" "),_("h2",{attrs:{id:"基本数据类型"}},[t._v("基本数据类型")]),t._v(" "),_("p",[t._v("JavaScript 是动态类型 dynamically typed 的编程语言，（可修改的）变量可以保存任何数据，且数据类型也可以不同。")]),t._v(" "),_("p",[t._v("JavaScript 支持 8 种 primitive data type 基本数据类型：")]),t._v(" "),_("ul",[_("li",[_("strong",[_("code",[t._v("number")]),t._v(" 数字类型")]),t._v("：代表整数和浮点数，还有特殊数值")]),t._v(" "),_("li",[_("strong",[_("code",[t._v("bigint")]),t._v(" 类型")]),t._v("：用于表示任意长度的整数")]),t._v(" "),_("li",[_("strong",[_("code",[t._v("string")]),t._v(" 字符串")]),t._v("：一个字符串可以包含一个或多个字符，必须被括在引号里")]),t._v(" "),_("li",[_("strong",[_("code",[t._v("boolean")]),t._v(" 逻辑类型")]),t._v("：仅含两个布尔值，即 "),_("code",[t._v("true")]),t._v(" 和 "),_("code",[t._v("false")])]),t._v(" "),_("li",[_("strong",[_("code",[t._v("null")]),t._v(" 空值类型")]),t._v("：只包含 "),_("code",[t._v("null")]),t._v(" 值，表示 value of nothing 空值/没有值")]),t._v(" "),_("li",[_("strong",[_("code",[t._v("undefined")]),t._v(" 未被赋值类型")]),t._v("： 只包含 "),_("code",[t._v("undefined")]),t._v(" 值，表示 absence of value 缺少值（连表示无的值也没有）")]),t._v(" "),_("li",[_("strong",[_("code",[t._v("symbol")]),t._v(" 标识符类型")]),t._v("：用于创建对象的唯一标识符")]),t._v(" "),_("li",[_("strong",[_("code",[t._v("object")]),t._v(" 对象类型")]),t._v("：包括内置对象和自定义创建的对象")])]),t._v(" "),_("p",[_("img",{attrs:{src:e(1067),alt:"JavaScript 数据类型（蓝色框标记的是基本数据类型）"}})]),t._v(" "),_("h3",{attrs:{id:"number-类型"}},[t._v("number 类型")]),t._v(" "),_("p",[t._v("数字类型的数据包括任何正负整数以及小数（JavaScript 不区分浮点数和整数，数字都以 64 位浮点数形式存储）。")]),t._v(" "),_("p",[t._v("number 类型数据可进行算术运算，如乘法 "),_("code",[t._v("*")]),t._v("、除法 "),_("code",[t._v("/")]),t._v("、加法 "),_("code",[t._v("+")]),t._v("、减法 "),_("code",[t._v("-")]),t._v(" 等等。")]),t._v(" "),_("p",[t._v("还包括 special numeric values 特殊数值（一般通过除以 0 产生）：")]),t._v(" "),_("ul",[_("li",[t._v("无穷大 "),_("code",[t._v("Infinity")]),t._v(" 正数除以 "),_("code",[t._v("0")]),t._v(" 产生")]),t._v(" "),_("li",[t._v("负无穷大 "),_("code",[t._v("-Infinity")]),t._v(" 负数除以 "),_("code",[t._v("0")]),t._v(" 产生")]),t._v(" "),_("li",[t._v("计算错误 "),_("code",[t._v("NaN")]),t._v(" 表示非数值 Not a Number，虽然属于 number 类型的一种，但它是一个不正确的或者一个未定义的数学操作所得到的结果，通常作为数字运算存在错误的返回值。")])]),t._v(" "),_("p",[t._v("⚠️ "),_("code",[t._v("NaN")]),t._v(" 是粘性的，即任何对 "),_("code",[t._v("NaN")]),t._v(" 的进一步操作都会返回 "),_("code",[t._v("NaN")])]),t._v(" "),_("p",[t._v("⚠️ "),_("strong",[t._v("值 "),_("code",[t._v("NaN")]),t._v(" 是独一无二的，它不等于任何东西，包括它本身")]),t._v("，因此不能使用类似于 "),_("code",[t._v("variable === NaN")]),t._v(" 的结构来检测参数是否为 "),_("code",[t._v("NaN")]),t._v("（因为无论变量为何值结果都为 "),_("code",[t._v("false")]),t._v("），可以使用函数 "),_("code",[t._v("isNaN(value)")]),t._v(" 来测试参数 "),_("code",[t._v("value")]),t._v(" 是否为非数值，返回一个布尔值。💡 但是函数 "),_("code",[t._v("isNaN()")]),t._v(" 会对传递进来的实参先进行"),_("strong",[t._v("类型转换")]),t._v("为数值，再进行检测判断，所以仅由数值构成的字符串，如 "),_("code",[t._v('"16"')]),t._v(" 函数返回值为 "),_("code",[t._v("false")]),t._v("（即认为它是数值） 。")]),t._v(" "),_("ul",[_("li",[t._v("如果一个 "),_("code",[t._v("typeof(value)")]),t._v(" 输出是 "),_("code",[t._v("number")]),t._v(" 类型，而且 "),_("code",[t._v("isNaN(value)")]),t._v(" 返回为 "),_("code",[t._v("true")]),t._v(" 那么它就是 "),_("code",[t._v("NaN")])]),t._v(" "),_("li",[t._v("其他类型的值也会在 "),_("code",[t._v("isNaN(value)")]),t._v(" 返回 "),_("code",[t._v("true")]),t._v(" 但它们不是 "),_("code",[t._v("number")]),t._v(" 类型，但也不是 "),_("code",[t._v("NaN")])])]),t._v(" "),_("h3",{attrs:{id:"bigint-类型"}},[t._v("bigint 类型")]),t._v(" "),_("p",[t._v("bigint 类型是最近被添加到 JavaScript 语言中的，用于表示任意长度的整数。因为"),_("code",[t._v("number")]),t._v(" 类型无法代表大于 2^53^（或小于 -2^53^）的整数（大约是 16 位的十进制数字），当需要表示很大的数字时，可以使用 "),_("code",[t._v("BigInt")]),t._v(" 类型，"),_("strong",[t._v("将 "),_("code",[t._v("n")]),t._v(" 附加到整数字段的末尾")]),t._v("。")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尾部的 n 表示这是一个 BigInt 类型")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bigInt "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234567890123456789012345678901234567890n")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h3",{attrs:{id:"string-类型"}},[t._v("string 类型")]),t._v(" "),_("p",[t._v("有三种包含字符串的方式")]),t._v(" "),_("ul",[_("li",[t._v("双引号 "),_("code",[t._v('"string"')])]),t._v(" "),_("li",[t._v("单引号 "),_("code",[t._v("'string'")])]),t._v(" "),_("li",[t._v("反引号 `string` "),_("strong",[t._v("功能扩展引号")]),t._v("。允许添加变量或表达式（包装在 "),_("code",[t._v("${expression}")]),t._v(" 中），变量值或表达式的计算结果会成为字符串的一部分，以构建灵活多变的字符串。")])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 嵌入一个变量")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token template-string"}},[_("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello, ")]),_("span",{pre:!0,attrs:{class:"token interpolation"}},[_("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),_("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("!")]),_("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello, John!")]),t._v("\n")])])]),_("h3",{attrs:{id:"boolean-类型"}},[t._v("boolean 类型")]),t._v(" "),_("p",[t._v("boolean 类型仅包含两个值 "),_("code",[t._v("true")]),t._v(" 和 "),_("code",[t._v("false")])]),t._v(" "),_("h3",{attrs:{id:"null-值"}},[t._v("null 值")]),t._v(" "),_("p",[t._v("null 值构成了一个独立的类型，只包含 "),_("code",[t._v("null")]),t._v(" 值。\n相比较于其他编程语言，JavaScript 中的 "),_("code",[t._v("null")]),t._v(" 仅仅是一个代表「无」、「空」或「值未知」的特殊值。")]),t._v(" "),_("p",[t._v("一般预期变量未来可能用于存储对象，可以将变量初始化的值设置为 "),_("code",[t._v("null")]),t._v("（也可以是 "),_("code",[t._v("{}")]),t._v("）")]),t._v(" "),_("p",[t._v("💡 如果变量未来用于存储字符串，可以初始化时设置为 "),_("code",[t._v('""')]),t._v("（空字符串）")]),t._v(" "),_("h3",{attrs:{id:"undefined-值"}},[t._v("undefined 值")]),t._v(" "),_("p",[t._v("undefined 值自成一个类型，只包含 "),_("code",[t._v("undefined")]),t._v(" 值。\n表示 absence of value 缺少值（连表示无的值也没有）即表示未被赋值，当变量定义没有初始值时 "),_("code",[t._v("console.log(x)")]),t._v(" 返回 "),_("code",[t._v("undefined")])]),t._v(" "),_("p",[t._v("💡 "),_("code",[t._v("undefined")]),t._v(" 是派生自 "),_("code",[t._v("null")]),t._v(" 的，它只与 "),_("code",[t._v("null")]),t._v(" 相等，不会与其他值相等。因此在相等性检测 "),_("code",[t._v("==")]),t._v(" 或 "),_("code",[t._v("!=")]),t._v(" 中两者相等（完全相等 "),_("code",[t._v("===")]),t._v(" 或 "),_("code",[t._v("!==")]),t._v(" 比较就不同了），而且两者在相等性检测时"),_("strong",[t._v("不会")]),t._v("进行任何的类型转换。")]),t._v(" "),_("h3",{attrs:{id:"object-类型"}},[t._v("object 类型")]),t._v(" "),_("p",[t._v("object 类型用于储存数据集合和更复杂的实体，通过该类型可以定制化各种数据类型结构。")]),t._v(" "),_("p",[t._v("除了 object 类型的其他基本数据类型称为"),_("strong",[t._v("原生类型")]),t._v("，它们的值只包含一个单独的内容，如字符串、数字或者其他之一；而对象类型是复杂数据类型，可以包括多种值，而且数据类型也可以不同，还可以包括方法（函数）")]),t._v(" "),_("p",[t._v("💡  函数属于对象类型，在 JavaScript 中函数也是一种对象")]),t._v(" "),_("h3",{attrs:{id:"symbol-类型"}},[t._v("symbol 类型")]),t._v(" "),_("p",[t._v("对象属性名不仅可以是字符串，还可以是 symbol 类型的值，它表示唯一标识符，是一种不可变的数据类型。")]),t._v(" "),_("p",[t._v("使用 "),_("code",[t._v('Symbol(["description"])')]),t._v(" 创建这类数据的值，其中描述是可选的。")]),t._v(" "),_("p",[t._v("因为是唯一标识符，所以"),_("strong",[t._v("即使描述是相同的但该值却是不同的")]),t._v("。")]),t._v(" "),_("p",[t._v("⚠️ symbol 值的描述只是一个标签，不是标识符本身，因此不可以通过描述访问/表示该值。")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建唯一标识符")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sym1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'banana'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sym2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'banana'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无论描述是什么，每次都创建新的标识符，因此以上创建的 sym1 和 sym2 是两个不同的标识符")]),t._v("\nconsole"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sym1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" sym2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),_("h2",{attrs:{id:"查询类型"}},[t._v("查询类型")]),t._v(" "),_("p",[t._v("使用运算符 "),_("code",[t._v("typeof")]),t._v(" 查询数据类型，返回值属于字符串类型，支持两种语法形式：")]),t._v(" "),_("ul",[_("li",[t._v("运算符 "),_("code",[t._v("typeof x")])]),t._v(" "),_("li",[t._v("函数形式 "),_("code",[t._v("typeof(x)")])])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "number"')]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is string'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "string"')]),t._v("\n")])])]),_("p",[t._v("⚠️ 当查询 "),_("code",[t._v("typeof null")]),t._v(" 返回 "),_("code",[t._v('"object"')]),t._v("，这是 JavaScript 编程语言的一个错误，实际上它并不是一个 "),_("code",[t._v("object")]),t._v("。")]),t._v(" "),_("p",[t._v("💡 函数会被作为特殊类型对待，实际是属于 Object 对象数据类型")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数被特殊对待")]),t._v("\n")])])]),_("h2",{attrs:{id:"隐式类型转换"}},[t._v("隐式类型转换")]),t._v(" "),_("p",[t._v("JavaScript 是一种松散类型的语言，即在声明变量时不需要指定数据类型，引擎解析代码时会自动将数据转换为正确的类型（即隐式类型转换），如 "),_("code",[t._v("alert()")]),t._v(" 函数会自动将任何传递进入的值转换为字符串，而算术运算符会将数据转换为数字类型。")]),t._v(" "),_("p",[t._v("💡 对数据类型要求不同的两种编程语言：")]),t._v(" "),_("ul",[_("li",[t._v("强类型语言：一种当数据与预期类型不完全相符时很有可能会产生错误的语言，如 Java")]),t._v(" "),_("li",[t._v("松散类型语言：不需要指定数据类型（如创建变量时不需要指定数据类型），根据所需自动转换数据类型的语言，如 JavaScript，但可能会产生因为隐式类型转换而导致的错误，并且难以诊断。")])]),t._v(" "),_("p",[t._v("⚠️ 由于 JavaScript 存在数据类型的隐式转换，因此在比较数据是否相等时最好使用"),_("strong",[t._v("绝对比较")]),t._v("的方法，在 "),_("code",[t._v("==")]),t._v(" 和 "),_("code",[t._v("!=")]),t._v(" 运算符的末尾再添加一个 "),_("code",[t._v("=")]),t._v("，即用 "),_("code",[t._v("===")]),t._v(" 和 "),_("code",[t._v("!==")]),t._v(" 符号进行比较。这样就可以将数据类型和数据值都纳入考虑范围，避免隐式类型转换引起的错误。")]),t._v(" "),_("div",{staticClass:"language-javascript extra-class"},[_("pre",{pre:!0,attrs:{class:"language-javascript"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 使用 `==` 运算符时 JavaScript 首先将字符串 `"1"` 会被转换为 `true`，再进行比较')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),_("h2",{attrs:{id:"类型转换"}},[t._v("类型转换")]),t._v(" "),_("p",[t._v("使用相应的类型转换函数将数据显式地转换为期望的类型。")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("value.toString()")]),t._v(" 将其他数据类型的值转换为字符串类型，如果不知道需要转换的值是不是 "),_("code",[t._v("null")]),t._v(" 或 "),_("code",[t._v("undefined")]),t._v(" 可以使用函数 "),_("code",[t._v("String(value)")]),t._v(" 将任何数据类型的值转换为字符串类型\n💡 一般基础数据类型都有相应的 "),_("code",[t._v(".toString")]),t._v(" 方法，当数据类型是对象时，可以为对象设置 "),_("code",[t._v("toString")]),t._v(" 方法，以指定转换为字符串时应该返回的值")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("Number()")]),t._v(" 转换为数字类型。当我们"),_("strong",[t._v("从 string 类型源（如文本表单）中读取一个值")]),t._v("，但期望输入一个数字时，通常需要进行显式转换，转换字符串时会忽略首尾处的空格字符")]),t._v(" "),_("p",[_("code",[t._v("Number(value)")]),t._v(" 转换规则")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"left"}},[t._v("原始值类型")]),t._v(" "),_("th",{staticStyle:{"text-align":"left"}},[t._v("转换为")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("code",[t._v("undefined")])]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[_("code",[t._v("NaN")])])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("code",[t._v("null")])]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[_("code",[t._v("0")])])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("code",[t._v("true")]),t._v(" 和 "),_("code",[t._v("false")])]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[_("code",[t._v("1")]),t._v(" 和 "),_("code",[t._v("0")])])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("code",[t._v("string")])]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("纯数字字符串中含有的数字；如果字符串为空，包括 "),_("code",[t._v("\\t")]),t._v("、"),_("code",[t._v("\\n")]),t._v(" 以及空格，转换为 "),_("code",[t._v("0")]),t._v("；如果不是纯数字字符串，转换出现 error 返回 "),_("code",[t._v("NaN")]),t._v("。")])])])])])]),t._v(" "),_("p",[t._v("💡 对于以数值开头的字符串，可以使用"),_("RouterLink",{attrs:{to:"/web/Frontend/JavaScript/语法基础/number类型.html#从字符串「读取」数字"}},[t._v("方法 "),_("code",[t._v("parseInt(str)")]),t._v(" 或 "),_("code",[t._v("parseFloat(str)")])]),t._v(" 提取其中的数值部分。")],1),t._v(" "),_("ul",[_("li",[_("code",[t._v("Boolean(value)")]),t._v(" 转换为布尔值。在逻辑运算中会隐式发生。\n"),_("code",[t._v("Boolean()")]),t._v(" 转换规则\n"),_("ul",[_("li",[t._v("「空」的值，如 "),_("code",[t._v("0")]),t._v("、空字符串、"),_("code",[t._v("null")]),t._v("、"),_("code",[t._v("undefined")]),t._v("、"),_("code",[t._v("NaN")]),t._v(" 将变为 "),_("code",[t._v("false")])]),t._v(" "),_("li",[t._v("「非空」其他值变成 "),_("code",[t._v("true")]),t._v("。⚠️ 字符串 "),_("code",[t._v('"0"')]),t._v(" 和只有空格组成的字符串 "),_("code",[t._v('" "')]),t._v(" 都转换为 "),_("code",[t._v("true")]),t._v("，因为这是「非空」字符串。")])])])]),t._v(" "),_("h2",{attrs:{id:"原始类型"}},[t._v("原始类型")]),t._v(" "),_("p",[t._v("在 8 种基本数据类型中，对象 object 类型比较特殊，因为它能够通过键值对的形式存储多个值作为属性；而其他 7 种数据类型每次都只能有一个值，称为原始 primitive 类型。")]),t._v(" "),_("p",[t._v("对象数据类型优势之一是可以把一个函数作为对象的属性存储起来，方便进行调用；但这造成"),_("strong",[t._v("对象比原始类型「更重」")]),t._v("，需要额外的资源来支持对象的运作。")]),t._v(" "),_("p",[t._v("其实原始类型的值也可以作为对象使用，有多种内置方法方便调用以对数据进行处理，如 "),_("code",[t._v("str.toUpperCase()")]),t._v(" 将字符串转换为全大写。")]),t._v(" "),_("p",[t._v("当需要访问原始类型数据的方法或属性时，JavaScript 会为使用「对象包装器」（对于每一种原始类型都不同，分别称为 "),_("code",[t._v("String")]),t._v("、"),_("code",[t._v("Number")]),t._v("、"),_("code",[t._v("Boolean")]),t._v(" 和 "),_("code",[t._v("Symbol")]),t._v("）创建一个包含该原始类型值的特殊对象，"),_("strong",[t._v("执行完属性或方法调用返回结果即被销毁")]),t._v("，该值最终依然只是一个原始数据值（而非对象），所以原始类型可以提供方法，JavaScript 引擎高度优化了这个过程，因此它们依然是「轻量级」的。")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HELLO")]),t._v("\n")])])]),_("p",[t._v("以下是 "),_("code",[t._v("str.toUpperCase()")]),t._v(" 中实际发生的情况：")]),t._v(" "),_("ol",[_("li",[t._v("字符串 "),_("code",[t._v("str")]),t._v(" 是一个原始值，在访问其属性时会创建一个包含字符串字面值的特殊对象，并且具有有用的方法，如 "),_("code",[t._v("toUpperCase()")])]),t._v(" "),_("li",[t._v("该方法运行并返回一个新的字符串（由 "),_("code",[t._v("alert")]),t._v(" 显示）")]),t._v(" "),_("li",[t._v("特殊对象被销毁，只留下原始值 "),_("code",[t._v("str")])])]),t._v(" "),_("p",[t._v("⚠️ 构造器 "),_("code",[t._v("String")]),t._v("、"),_("code",[t._v("Number")]),t._v("、"),_("code",[t._v("Boolean")]),t._v(" 仅供内部使用，虽然允许我们使用 "),_("code",[t._v("new Number(1)")]),t._v(" 或 "),_("code",[t._v("new Boolean(false)")]),t._v(" 等语法明确地为原始类型创建「对象包装器」，但"),_("strong",[t._v("极其不推荐")]),t._v("，因为在条件判断时对象始终为 "),_("code",[t._v("true")]),t._v("，而原始数据类型可以进行隐式类型转换。")]),t._v(" "),_("p",[t._v("💡 特殊的原始类型 "),_("code",[t._v("null")]),t._v(" 和 "),_("code",[t._v("undefined")]),t._v(" 是例外，它们没有对应的「对象包装器」，也没有提供任何方法，它们是「最原始的」。")])])}),[],!1,null,null,null);v.default=s.exports}}]);