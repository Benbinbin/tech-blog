(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{1216:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"变量"}},[t._v("变量")]),t._v(" "),n("p",[t._v("变量 Variable 是用以引用/访问内存中的数据，有时也称为 "),n("strong",[t._v("标识符 Identifier")]),t._v("，一般可以通过"),n("strong",[t._v("赋值符号")]),t._v("改变其引用的内容；与之相对应的 "),n("strong",[t._v("字面量 Literal")]),t._v("，是指实际或本身的含义，而非引用指代，其直接表示其本身，因此无法给字面量赋值绑定其他数据。")]),t._v(" "),n("h2",{attrs:{id:"创建变量"}},[t._v("创建变量")]),t._v(" "),n("p",[n("code",[t._v("variable_name = value")])]),t._v(" "),n("ul",[n("li",[t._v("其中 "),n("code",[t._v("=")]),t._v(" 是"),n("strong",[t._v("赋值")]),t._v("运算符")]),t._v(" "),n("li",[t._v("表达式的"),n("strong",[t._v("顺序")]),t._v("非常重要，即"),n("strong",[t._v("变量名 "),n("code",[t._v("=")]),t._v(" 值")]),t._v("。赋值运算符 "),n("code",[t._v("=")]),t._v(" 的作用是"),n("strong",[t._v("将右侧的值赋给左侧的变量名")])])]),t._v(" "),n("p",[n("strong",[t._v("注意")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("在赋值时若右侧是表达式，那么左侧变量被赋予的是右侧表达式的"),n("strong",[t._v("值")]),t._v("，而不是表达式本身")]),t._v(" "),n("li",[t._v("如果你要使用变量名，首先"),n("strong",[t._v("必须为其赋值")])])]),t._v(" "),n("h3",{attrs:{id:"多重赋值"}},[t._v("多重赋值")]),t._v(" "),n("p",[t._v("可以在一行代码中"),n("strong",[t._v("同时为两个变量赋值")])]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Using multiple assignment")]),t._v("\nsavings"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" salary "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("514.86")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("320.51")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用逗号分隔")]),t._v("\n")])])]),n("p",[t._v("第一个变量被赋值为"),n("code",[t._v("=")]),t._v("之后的第一个值，第二个变量则接收第二个值。")]),t._v(" "),n("p",[t._v("对于两个紧密相关的变量，如某物体的 x 轴和 y 轴坐标，可以使用多重赋值。")]),t._v(" "),n("h2",{attrs:{id:"增量赋值"}},[t._v("增量赋值")]),t._v(" "),n("p",[t._v("所有算术运算符都有增量赋值运算符。")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价于 x = x + 1")]),t._v("\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价于 toobig = toobig /2")]),t._v("\ntoobig "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),n("h2",{attrs:{id:"变量命名规范"}},[t._v("变量命名规范")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("保留字")]),t._v("不可作变量名。保留字列表见此。见"),n("a",{attrs:{href:"https://docs.python.org/3/reference/lexical_analysis.html#keywords",target:"_blank",rel:"noopener noreferrer"}},[t._v("保留字列表"),n("OutboundLink")],1)])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("False      await      else       import     pass\nNone       break      except     in         raise\nTrue       class      finally    is         return\nand        continue   for        lambda     try\nas         def        from       nonlocal   while\nassert     del        global     not        with\nasync      elif       if         or         yield\n")])])]),n("ul",[n("li",[t._v("变量名中只能使用"),n("strong",[t._v("普通字母（小写）")]),t._v("、"),n("strong",[t._v("数字")]),t._v("和"),n("strong",[t._v("下划线")]),t._v("（且以数字不可作为变量开头）")]),t._v(" "),n("li",[t._v("命名变量的方式称为"),n("strong",[t._v("snake case")])]),t._v(" "),n("li",[t._v("不建议使用"),n("strong",[t._v("内置的标识符")]),t._v("作为变量名，虽然不会立即导致错误（例如为 int 赋值）")])]),t._v(" "),n("h2",{attrs:{id:"访问变量"}},[t._v("访问变量")]),t._v(" "),n("p",[t._v("访问变量仅需使用"),n("strong",[t._v("变量名")])]),t._v(" "),n("p",[t._v("如果需要将变量的值显示在终端可使用内置函数"),n("code",[t._v("print()")]),t._v("\n（如果没有 print，Python 中发生的事情只会停留在 Python 内部。)")]),t._v(" "),n("p",[n("strong",[t._v("注意")]),t._v("：\n在 Python 2 中打印时不需要使用括号，但是在 Python 3 中需要，所以请勿忘记"),n("strong",[t._v("括号")]),t._v("！"),n("code",[t._v("print")]),t._v(" 是 Python 的一个内置函数。Python 中的函数调用始终带有一对括号，如果有参数，那么参数放在括号内。所以 "),n("code",[t._v("print")]),t._v(" 函数的语法需要一对括号，并将参数放在括号内。")]),t._v(" "),n("h2",{attrs:{id:"更新变量"}},[t._v("更新变量")]),t._v(" "),n("p",[t._v("通过为"),n("strong",[t._v("同一个变量名重新赋值")]),t._v("以更新变量存储的数据，在重新赋值时可以"),n("strong",[t._v("使用含有该变量名")]),t._v("（在赋值号右侧该变量指向原始数据）的计算公式来更新数值")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" manila_pop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1780148")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("manila_pop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1780148")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" manila_pop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" manila_pop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1675")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("250")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("manila_pop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1781573")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(608),alt:"表达式赋值"}})]),t._v(" "),n("ul",[n("li",[t._v("位于等号左侧的变量 "),n("code",[t._v("manila_pop")]),t._v("，被赋值为整个右侧表达式 "),n("code",[t._v("manila_pop + 1675 - 250")]),t._v(" 的"),n("strong",[t._v("值")])]),t._v(" "),n("li",[t._v("赋值顺序是将右侧的"),n("strong",[t._v("值")]),t._v("赋给左侧的变量，所以在运行右侧的表达式时 "),n("code",[t._v("manila_pop")]),t._v(" 值仍为 "),n("code",[t._v("1780148")])]),t._v(" "),n("li",[t._v("所以赋值号右侧 "),n("code",[t._v("manila_pop")]),t._v(" 的当前值仍然为 "),n("code",[t._v("1780148")])])]),t._v(" "),n("h3",{attrs:{id:"简化表达式-其他赋值运算符"}},[t._v("简化表达式（其他赋值运算符）")]),t._v(" "),n("p",[t._v("赋值符号左右两边都涉及相同的变量时，表达式可能可使用简化表达式")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# increase the value of manila_pop by 1675")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# equal to manila_pop = manila_pop + 1675")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" manila_pop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1675")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# decrease the value of manila_pop by 250")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# equal to manila_pop = manila_pop - 250")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" manila_pop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("250")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# decimate manila_pop")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# equal to manila_pop = manila_pop * 0.9")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" manila_pop "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.9")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# half the area of Manila")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# equal to manila_pop = manila_pop / 2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" manila_area "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),n("h2",{attrs:{id:"变量作用域"}},[t._v("变量作用域")]),t._v(" "),n("p",[t._v("变量作用域 scope 是指程序"),n("strong",[t._v("在哪个部分可引用或使用某个变量")])]),t._v(" "),n("p",[t._v("函数使用时需要特别留意变量的作用域")]),t._v(" "),n("ul",[n("li",[t._v("如果变量是在函数"),n("strong",[t._v("内")]),t._v("创建的，则该变量只能在函数"),n("strong",[t._v("内部使用（修改或引用）")]),t._v("（无法从函数外部使用）")]),t._v(" "),n("li",[t._v("如果是在函数之"),n("strong",[t._v("外")]),t._v("创建，依然可以在函数"),n("strong",[t._v("内部访问")]),t._v("（但不能"),n("strong",[t._v("更改或重新赋值")]),t._v("以修改在"),n("strong",[t._v("函数外部")]),t._v("创建的变量）")])]),t._v(" "),n("p",[t._v("💡 将变量"),n("strong",[t._v("定义在所需的最小作用域内")]),t._v("。虽然函数可以引用在更大的作用域内定义的变量，但是通常不建议这么做，因为程序有很多变量，可能不记得之前定义了什么全局变量而引起冲突。")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("egg_count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("buy_eggs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    egg_count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# purchase a dozen eggs")]),t._v("\n\nbuy_eggs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("🔨")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("Traceback "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("most recent call last"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n  File "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C:/Users/10267/Desktop/test.py"')]),t._v(", line "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("module"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    buy_eggs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  File "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C:/Users/10267/Desktop/test.py"')]),t._v(", line "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(", "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" buy_eggs\n    egg_count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\nUnboundLocalError: "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" variable "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'egg_count'")]),t._v(" referenced before assignment\n")])])]),n("p",[t._v("导致 "),n("code",[t._v("UnboundLocalError")]),t._v(" 因为 Python 不允许函数"),n("strong",[t._v("修改不在函数作用域内的变量")]),t._v("。（但可以引用）")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("此处先在函数外定义了变量 "),n("code",[t._v("egg_count")]),t._v(" 的值")])]),t._v(" "),n("li",[n("p",[t._v("在函数内部变量 "),n("code",[t._v("egg_count")]),t._v(" 虽然与函数外的变量有相同的名称，但是可以理解为是不同的变量（可以理解为函数内的变量是形参），此处直接没有定义内部的变量就对变量进行加法操作，所以会引起 "),n("code",[t._v("UnboundLocalError")]),t._v(" 错误")])]),t._v(" "),n("li",[n("p",[t._v("⚠️ 上面的原则"),n("strong",[t._v("仅适用于整数和字符串")])])]),t._v(" "),n("li",[n("p",[t._v("⚠️ "),n("strong",[t._v("列表、字典、集合、类")]),t._v("中可以在子程序（子函数）中通过"),n("strong",[t._v("修改局部变量达到修改全局变量")]),t._v("的目的。")])])])])}),[],!1,null,null,null);s.default=e.exports},608:function(t,s,a){t.exports=a.p+"assets/img/1535551382_2321.dd4be6bb.jpg"}}]);