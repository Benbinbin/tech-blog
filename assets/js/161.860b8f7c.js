(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{1054:function(t,s,a){t.exports=a.p+"assets/img/20200318110428088_29411.3b83b4b5.png"},1414:function(t,s,a){"use strict";a.r(s);var e=a(18),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"操作符"}},[t._v("操作符")]),t._v(" "),e("p",[t._v("JavaScript 支持多种操作符/运算符，且不同数据类型可支持的运算符和运算含义也不同。")]),t._v(" "),e("p",[t._v("JavaScript 支持的常见操作符")]),t._v(" "),e("ul",[e("li",[t._v("算术操作符")]),t._v(" "),e("li",[t._v("逻辑操作符")]),t._v(" "),e("li",[t._v("赋值操作符")]),t._v(" "),e("li",[t._v("比较操作符")]),t._v(" "),e("li",[t._v("三元操作符，一般用于"),e("RouterLink",{attrs:{to:"/web/Frontend/JavaScript/语法基础/条件语句.html#三元运算符"}},[t._v("条件语句")]),t._v("中")],1)]),t._v(" "),e("p",[t._v("需要厘清几个核心概念：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("运算元")]),t._v("：运算符应用的对象，也称参数。")]),t._v(" "),e("li",[e("strong",[t._v("一元运算符")]),t._v("：一个运算符对应只操作有一个运算元，如 unary negation 一元负号运算符  "),e("code",[t._v("-")])]),t._v(" "),e("li",[e("strong",[t._v("二元运算符")]),t._v("：一个运算符拥有两个运算元，如减号运算符 "),e("code",[t._v("-")])])]),t._v(" "),e("p",[t._v("💡 按位操作符是将其操作数当作最多为 32 位的比特序列（由0和1组成，而不是十进制、十六进制或八进制数值）进行操作，并返回标准的 JavaScript 数字，具体运算规则可查看 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("按位操作符 - JavaScript | MDN"),e("OutboundLink")],1),t._v(" 文档。")]),t._v(" "),e("h2",{attrs:{id:"运算符优先等级"}},[t._v("运算符优先等级")]),t._v(" "),e("p",[t._v("如果一个表达式拥有超过一个运算符，执行的顺序则由优先级决定")]),t._v(" "),e("p",[t._v("JavaScript 中"),e("a",{attrs:{href:"https://developer.mozilla.org/en/JavaScript/Reference/operators/operator_precedence",target:"_blank",rel:"noopener noreferrer"}},[t._v("每个运算符都有对应的优先级数字"),e("OutboundLink")],1),t._v("，数字越大越先执行，如果优先级相同，则按照由左至右的顺序执行。")]),t._v(" "),e("p",[t._v("💡 要记住一元运算符优先级高于二元运算符")]),t._v(" "),e("h2",{attrs:{id:"算术运算"}},[t._v("算术运算")]),t._v(" "),e("p",[t._v("JavaScript 控制台支持计算数字公式，常用的算术运算符")]),t._v(" "),e("ul",[e("li",[t._v("加法 "),e("code",[t._v("+")])]),t._v(" "),e("li",[t._v("减法 "),e("code",[t._v("-")])]),t._v(" "),e("li",[t._v("乘法 "),e("code",[t._v("*")]),t._v(" ⚠️ 不是 "),e("code",[t._v("x")])]),t._v(" "),e("li",[t._v("除法 "),e("code",[t._v("/")]),t._v("（在 Java 中是整除）")]),t._v(" "),e("li",[t._v("乘方 "),e("code",[t._v("**")]),t._v(" 即幂运算，对于运算元是非整数的情况依然适用，如 "),e("code",[t._v("a ** (1/2)")]),t._v(" 相当于开方。 ⚠️ 日常数学公式中的乘方符号 "),e("code",[t._v("^")]),t._v(" 在是指按位 "),e("code",[t._v("XOR")])]),t._v(" "),e("li",[t._v("取模 "),e("code",[t._v("%")]),t._v(" modulo 即求余")])]),t._v(" "),e("h2",{attrs:{id:"比较运算"}},[t._v("比较运算")]),t._v(" "),e("p",[t._v("比较数值的比较运算符")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("运算符")]),t._v(" "),e("th",[t._v("含义")]),t._v(" "),e("th",[t._v("备注")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("<")])]),t._v(" "),e("td",[t._v("小于")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v(">")])]),t._v(" "),e("td",[t._v("大于")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<=")])]),t._v(" "),e("td",[t._v("小于或等于")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v(">=")])]),t._v(" "),e("td",[t._v("大于或等于")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[e("code",[t._v("==")])]),t._v(" "),e("td",[t._v("等于")]),t._v(" "),e("td",[t._v("比较值是否相等（比较前可能进行隐式转换）")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("===")])]),t._v(" "),e("td",[t._v("全等于")]),t._v(" "),e("td",[t._v("同时比较数据类型和值是否相等")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("!=")])]),t._v(" "),e("td",[t._v("不等于")]),t._v(" "),e("td",[t._v("比较值是否不相等（比较前可能进行隐式转换）")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("!==")])]),t._v(" "),e("td",[t._v("不全等")]),t._v(" "),e("td",[t._v("同时比较数据类型和值是否不相等（只要其中一个不相同就是不全等）")])])])]),t._v(" "),e("p",[t._v("数字之间的比较结果是布尔值 "),e("code",[t._v("true")]),t._v(" 或 "),e("code",[t._v("false")]),t._v("，比较的结果可以被赋值给任意变量")]),t._v(" "),e("p",[t._v("💡 当对"),e("strong",[t._v("不同类型")]),t._v("的值进行比较时，JavaScript 会首先将其转化为数字 number 类型，再判定大小。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("比较字符的大小时，JavaScript 会使用 Unicode 编码顺序进行判定，而对于字符串时是按从左往右依次比较字符（母）。")]),t._v(" "),e("p",[t._v("字符串的比较算法步骤：")]),t._v(" "),e("ol",[e("li",[t._v("首先比较两个字符串的首位字符大小。")]),t._v(" "),e("li",[t._v("如果一方字符较大（或较小），则该字符串大于（或小于）另一个字符串。算法结束。")]),t._v(" "),e("li",[t._v("否则，如果两个字符串的首位字符相等，则继续取出两个字符串各自的后一位字符进行比较。")]),t._v(" "),e("li",[t._v("重复上述步骤进行比较，直到比较完成某字符串的所有字符为止。")]),t._v(" "),e("li",[t._v("如果两个字符串的字符同时用完，那么则判定它们相等，否则未结束（还有未比较的字符）的字符串更大。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Glow'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Glee'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bee'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Be'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("null")]),t._v(" 和 "),e("code",[t._v("undefined")]),t._v(" 比较行为很特别。")]),t._v(" "),e("p",[t._v("当使用"),e("strong",[t._v("非严格相等 "),e("code",[t._v("==")]),t._v(" 比较")]),t._v(" "),e("code",[t._v("null")]),t._v(" 空值和 "),e("code",[t._v("undefined")]),t._v(" 未定义时，JavaScript 存在一个特殊的规则，会判定它们相等。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),e("p",[t._v("当使用数学式或其他比较方法 "),e("code",[t._v("<")]),t._v(" "),e("code",[t._v(">")]),t._v(" "),e("code",[t._v("<=")]),t._v(" "),e("code",[t._v(">=")]),t._v("时（不包括 "),e("code",[t._v("==")]),t._v(" 与 "),e("code",[t._v("!=")]),t._v("，由于相等性检测比较特殊，与其他比较运算符行为不一样）"),e("code",[t._v("null")]),t._v(" 和 "),e("code",[t._v("undefined")]),t._v(" 会被分别转化为数字 "),e("code",[t._v("0")]),t._v(" 和 "),e("code",[t._v("NaN")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null 转换为 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null 不转换为 0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),e("p",[t._v("💡 "),e("code",[t._v("undefined")]),t._v(" 和 "),e("code",[t._v("null")]),t._v(" 在相等性检测 "),e("code",[t._v("==")]),t._v(" 或 "),e("code",[t._v("!=")]),t._v(" 中"),e("strong",[t._v("不会")]),t._v("进行任何的类型转换，且"),e("code",[t._v("undefined")]),t._v(" 只与 "),e("code",[t._v("null")]),t._v(" 相等，不会与其他值相等。")])])]),t._v(" "),e("p",[t._v("⚠️ 由于比较不同类型的值时，处于判断符号 "),e("code",[t._v("==")]),t._v(" 或 "),e("code",[t._v("!=")]),t._v(" 两侧的值会先被转化为数字，隐式类型转换引起不可预料的结果。推荐使用"),e("RouterLink",{attrs:{to:"/web/Frontend/JavaScript/语法基础/数据类型.html#隐式类型转换"}},[t._v("绝对比较运算符")]),t._v("则比较时不会做任何的类型转换。")],1),t._v(" "),e("p",[t._v("⚠️ 由于 "),e("code",[t._v("null")]),t._v(" 和 "),e("code",[t._v("undefined")]),t._v(" 特殊的比较行为，对于取值可能是 "),e("code",[t._v("null")]),t._v(" 或 "),e("code",[t._v("undefined")]),t._v(" 的变量，请按需要分别检查它的取值情况。")]),t._v(" "),e("h2",{attrs:{id:"字符串连接"}},[t._v("字符串连接")]),t._v(" "),e("p",[t._v("二元运算符加号 "),e("code",[t._v("+")]),t._v(" 被应用于字符串，将合并（连接）各个字符串。"),e("strong",[t._v("只要其中一个运算元是字符串，那么另一个运算元也将被转化（数据隐式类型转换）为字符串")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "12"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "21"')]),t._v("\n")])])]),e("p",[t._v("💡 如果想在连接的两个字符串之间留个空格，需要明确地在添加（使用引号把空格包括插在两者之间），解析器不会自动添加")]),t._v(" "),e("p",[t._v("⚠️ 运算符运算方向根据运算符的不同优先级别而定，或同级别的运算符由左至右运算，因此如果是两个数字相加，后面再连接一个字符串，那么两个数字会先进行算术运算，再转化为字符串与其后的字符串连接")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Hello50"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "41" 而不是 "221"')]),t._v("\n")])])]),e("p",[t._v("💡 除了加法，其余的算术运算符对于字符串和数值之间的计算，会先将字符串进行隐式转换为数值在进行运算；而加法则是进行字符串的拼接（即数字会被隐式转换为字符串）。")]),t._v(" "),e("h2",{attrs:{id:"赋值运算符"}},[t._v("赋值运算符")]),t._v(" "),e("p",[t._v("赋值运算符将右侧的值「写入」左侧的变量，对于链式赋值也是由右向左执行。")]),t._v(" "),e("p",[t._v("💡 每个运算符都有一个返回值，赋值符号返回左侧的值。")]),t._v(" "),e("h2",{attrs:{id:"数字转换"}},[t._v("数字转换")]),t._v(" "),e("p",[t._v("一元运算符加号，即加号 "),e("code",[t._v("+")]),t._v(" 应用于单个值，会将其转化为数字（对数字没有任何作用），相当于 "),e("code",[t._v("Number()")]),t._v(" 函数。")]),t._v(" "),e("h2",{attrs:{id:"逗号运算符"}},[t._v("逗号运算符")]),t._v(" "),e("p",[t._v("逗号运算符能让我们处理多个语句，使用 "),e("code",[t._v(",")]),t._v(" 将它们分开，每个语句都运行了，但是只有最后的语句的结果会被返回。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 for 循环的条件判断中，一行上用逗号分隔了三个算式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"自增和自减"}},[t._v("自增和自减")]),t._v(" "),e("ul",[e("li",[t._v("自增："),e("code",[t._v("x++")]),t._v(" or "),e("code",[t._v("++x")]),t._v(" 等同于 "),e("code",[t._v("x = x + 1")])]),t._v(" "),e("li",[t._v("自减："),e("code",[t._v("x--")]),t._v(" or "),e("code",[t._v("--x")]),t._v(" 等同于 "),e("code",[t._v("x = x - 1")])])]),t._v(" "),e("p",[t._v("💡 自增/自减的优先级比绝大部分的算数运算符要高。\n💡 前置自增 "),e("code",[t._v("++x")]),t._v(" 和后置自增 "),e("code",[t._v("x++")]),t._v(" 在返回值的行为上有所不同")]),t._v(" "),e("ul",[e("li",[t._v("前置自增 "),e("code",[t._v("++x")]),t._v(" 返回新值，即计算后再返回新值。")]),t._v(" "),e("li",[t._v("后置自增 "),e("code",[t._v("x++")]),t._v("返回原来的值，即先返回原值再自增。")])]),t._v(" "),e("p",[t._v("一般它们只有"),e("strong",[t._v("在使用自增式子的返回值作为表达式一部分时才有区别")]),t._v("，若只是需要自增 "),e("code",[t._v("x")]),t._v(" 值则两种方式均可。因此如果我们想要对变量进行自增操作，并且需要立刻使用自增后的值，那么我们需要使用前置形式；如果我们想要将一个数加一，但是我们想使用其自增之前的值，那么我们需要使用后置形式。自减也是类似。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前置自增")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("counter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后置自增")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" counter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counter"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),e("p",[t._v("⚠️ 自增/自减只能应用于变量")]),t._v(" "),e("h2",{attrs:{id:"修改并替换"}},[t._v("修改并替换")]),t._v(" "),e("p",[t._v("对一个变量进行操作，并把计算得到的新结果存储在原来的这个变量中，可以使用简写形式：")]),t._v(" "),e("p",[t._v("💡 简短的“修改并替换”运算符对所有的运算符包括位运算符都有效，如 "),e("code",[t._v("/=")]),t._v("等等。")]),t._v(" "),e("p",[t._v("常用的简写形式")]),t._v(" "),e("ul",[e("li",[t._v("增加简写："),e("code",[t._v("x += 3")]),t._v(" 等同于 "),e("code",[t._v("x = x + 3")])]),t._v(" "),e("li",[t._v("减少简写 "),e("code",[t._v("x -= 6")]),t._v(" 等同于 "),e("code",[t._v("x = x - 6")])]),t._v(" "),e("li",[t._v("相乘简写："),e("code",[t._v("x *= 2")]),t._v(" 等同于 "),e("code",[t._v("x = x * 2")])]),t._v(" "),e("li",[t._v("相除简写："),e("code",[t._v("x /= 5")]),t._v(" 等同于 "),e("code",[t._v("x = x / 5")])])]),t._v(" "),e("h2",{attrs:{id:"逻辑运算符"}},[t._v("逻辑运算符")]),t._v(" "),e("p",[t._v("JavaScript 里有三个逻辑运算符：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("||")]),t._v(" 或，优先级别最低")]),t._v(" "),e("li",[e("code",[t._v("&&")]),t._v("与，优先级别为中")]),t._v(" "),e("li",[e("code",[t._v("!")]),t._v(" 非，优先级别最高")])]),t._v(" "),e("p",[t._v("💡 逻辑表达式基于优先级别（默认）从左到右进行条件判断，可以用括号来更改运算的优先级别。")]),t._v(" "),e("p",[t._v("这些运算符操作布尔值组合并返回相应的布尔值作为结果。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("逻辑运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("示例")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("解释")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("&&")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("逻辑 "),e("code",[t._v("AND")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("value1 && value2")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("只有 "),e("code",[t._v("value1")]),t._v(" 和 "),e("code",[t._v("value2")]),t._v(" 都为 "),e("code",[t._v("true")]),t._v("，才返回 "),e("code",[t._v("true")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("||")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("逻辑 "),e("code",[t._v("OR")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("value1 || value2")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("只要 "),e("code",[t._v("value1")]),t._v(" 或 "),e("code",[t._v("value2")]),t._v(" 之一为 "),e("code",[t._v("true")]),t._v("，就返回 "),e("code",[t._v("true")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("!")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("逻辑 "),e("code",[t._v("NOT")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("!value1")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("返回 "),e("code",[t._v("value1")]),t._v(" 的相反值")])])])]),t._v(" "),e("p",[t._v("💡 如果操作数不是布尔值，那么它将会被"),e("RouterLink",{attrs:{to:"/web/Frontend/JavaScript/语法基础/数据类型.html#类型转换"}},[t._v("隐式转化为布尔值")]),t._v("来参与运算，则"),e("strong",[t._v("返回值")]),t._v("就不一定是布尔值，如对于两个操作数的 "),e("code",[t._v("&&")]),t._v(" 运算，可以用于选择性地返回特定的值（基于短路规则）")],1),t._v(" "),e("ul",[e("li",[t._v("如果第一个操作数隐式类型转换后为 "),e("code",[t._v("true")]),t._v("，则"),e("strong",[t._v("返回第二个操作数")])]),t._v(" "),e("li",[t._v("如果第一个操作数隐式类型转换后为 "),e("code",[t._v("false")]),t._v("，则"),e("strong",[t._v("返回第一个操作数")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("55")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值为 55，而不是 true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("55")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值为 0，而不是 false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值为字符串 abc")]),t._v("\n")])])]),e("p",[t._v("如果存在特殊的值，有 "),e("code",[t._v("null")]),t._v("、"),e("code",[t._v("NaN")]),t._v("、"),e("code",[t._v("undefined")]),t._v(" 之一，对于多个操作数执行 "),e("code",[t._v("&&")]),t._v(" 运算，当前面的操作数隐式类型转换后都为 "),e("code",[t._v("true")]),t._v("，其后的值遵循特定规则（基于短路规则）")]),t._v(" "),e("ul",[e("li",[t._v("如果有一个操作数是 "),e("code",[t._v("null")]),t._v("，则返回 "),e("code",[t._v("null")])]),t._v(" "),e("li",[t._v("如果有一个操作数是 "),e("code",[t._v("NaN")]),t._v("，则返回 "),e("code",[t._v("NaN")])]),t._v(" "),e("li",[t._v("如果有一个操作数是 "),e("code",[t._v("undefined")]),t._v("，则返回 "),e("code",[t._v("undefined")])])]),t._v(" "),e("h3",{attrs:{id:"或"}},[t._v("或")]),t._v(" "),e("p",[e("strong",[t._v("或运算 "),e("code",[t._v("||")])]),t._v(" 是指参与运算的任意一个参数为 "),e("code",[t._v("true")]),t._v("，返回的结果就为 "),e("code",[t._v("true")]),t._v("，否则返回 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或运算真值表，四种可能的逻辑组合")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),e("p",[t._v("也支持非布尔值（进行隐式类型转换）组合运算，💡 可以用于 if 语句中，用多个 "),e("code",[t._v("||")]),t._v(" 并列串联不同的条件语句，构成复杂的判断情况")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 工作原理相当于 if( true || false )")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'truthy!'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 弹出一个模态窗口显示 truthy！")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"与"}},[t._v("与")]),t._v(" "),e("p",[e("strong",[t._v("与运算 "),e("code",[t._v("&&")])]),t._v(" 是指当两个操作数都是真值才返回 "),e("code",[t._v("true")]),t._v("，否则返回 "),e("code",[t._v("false")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与运算真值表，四种可能的逻辑组合")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),e("p",[t._v("就像或运算一样，可以支持任意类型的值组合运算，并返回 "),e("code",[t._v("false")]),t._v(" 相对应的参数。")]),t._v(" "),e("h3",{attrs:{id:"短路"}},[t._v("短路")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("&&")]),t._v(" 或 "),e("code",[t._v("||")]),t._v(" 逻辑运算符时，出现的逻辑表达式的"),e("strong",[t._v("后续参数不用考虑")]),t._v("的行为就叫做"),e("strong",[t._v("最少运算")]),t._v("或"),e("strong",[t._v("短路")]),t._v("，因为前面的参数已经满足条件了。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(1054),alt:" 与  运算的真假值表"}})]),t._v(" "),e("p",[t._v("在特定的情况下，后一个条件 B 的布尔值不重要：")]),t._v(" "),e("ul",[e("li",[t._v("当第一个条件 A 布尔值为 "),e("code",[t._v("false")]),t._v(" 时，那么无论第二个条件 B 的值是多少，"),e("code",[t._v("A && B")]),t._v(" 整个表达式始终为 "),e("code",[t._v("false")]),t._v("，则在该情况下不须考虑条件 B 的情况。")]),t._v(" "),e("li",[t._v("当第一个条件 A 布尔值为 "),e("code",[t._v("true")]),t._v(" 时，那么无论第二个条件 B 的值是多少，"),e("code",[t._v("A || B")]),t._v(" 整个表达式始终为 "),e("code",[t._v("true")]),t._v("，则在该情况下不须考虑条件 B 的情况。")])]),t._v(" "),e("p",[t._v("利用短路特性，可以实现"),e("strong",[t._v("短路取值")]),t._v("，即通过一个逻辑链为变量赋予特定的值：")]),t._v(" "),e("ul",[e("li",[t._v("一个"),e("strong",[t._v("或运算 "),e("code",[t._v("||")])]),t._v(" 链，将返回第一个真值，如果没有真值就返回最后一个值。")]),t._v(" "),e("li",[t._v("一个"),e("strong",[t._v("与运算 "),e("code",[t._v("&&")])]),t._v(" 链，将返回第一个假值，如果没有假值就返回最后一个值。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentUser "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" defaultUser "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentUser "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" defaultUser "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unnamed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回第一个真值或最后一个值")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// John")]),t._v("\n")])])]),e("h3",{attrs:{id:"非"}},[t._v("非")]),t._v(" "),e("p",[e("strong",[t._v("非运算 "),e("code",[t._v("!")])]),t._v(" 是指返回参数的相反的布尔值。")]),t._v(" "),e("p",[t._v("💡 可以使用两个非运算 "),e("code",[t._v("!!")]),t._v(" 来将某个值转化为布尔类型，类似于 "),e("code",[t._v("Boolean()")]),t._v(" 函数")])])}),[],!1,null,null,null);s.default=n.exports}}]);