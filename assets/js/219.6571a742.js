(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{1237:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"循环语句"}},[t._v("循环语句")]),t._v(" "),a("ul",[a("li",[t._v("可迭代对象")])]),t._v(" "),a("p",[t._v("循环是针对"),a("strong",[t._v("可迭代对象")]),t._v("的操作，可迭代对象指"),a("strong",[t._v("每次可以返回其中一个元素")]),t._v("的对象，包括字符串、列表和元组等"),a("strong",[t._v("序列类型")]),t._v("，字典和文件等"),a("strong",[t._v("非序列类型")]),t._v("。可以使用"),a("a",{attrs:{href:"https://anandology.com/python-practice-book/iterators.html",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("迭代器")]),t._v("和"),a("strong",[t._v("生成器")]),a("OutboundLink")],1),t._v("定义可迭代对象")]),t._v(" "),a("ul",[a("li",[t._v("迭代变量")])]),t._v(" "),a("p",[a("strong",[t._v("迭代变量命名")]),t._v("模式建议使用迭代变量和可迭代对象指定"),a("strong",[t._v("相同的名称")]),t._v("，但是分别使用"),a("strong",[t._v("单复数形式")]),t._v("（迭代变量使用单数，可迭代对象使用复数）")]),t._v(" "),a("h2",{attrs:{id:"for-循环"}},[t._v("for 循环")]),t._v(" "),a("p",[a("code",[t._v("for")]),t._v(" 循环用来"),a("strong",[t._v("遍历")]),t._v("可迭代对象，如列表、字典，即使用"),a("strong",[t._v("迭代变量")]),t._v("依次访问迭代对象中的元素，一般将其带入到"),a("strong",[t._v("缩进代码")]),t._v("里进行处理。")]),t._v(" "),a("p",[a("code",[t._v("for")]),t._v(" 循环是一种"),a("strong",[t._v("有限迭代")]),t._v("，即循环主体的"),a("strong",[t._v("运行次数已提前定义好")]),t._v("（对迭代对象中的每个元素运行主体一次）。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# iterable of cities")]),t._v("\ncities "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new york city'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mountain view'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'chicago'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'los angeles'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for loop that iterates over the cities list")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" city "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" cities"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以关键字 "),a("code",[t._v("for")]),t._v(" 开始")]),t._v(" "),a("li",[a("code",[t._v("iteration_variable in iterable")]),t._v("，其中 "),a("code",[t._v("iterable")]),t._v(" 表示被遍历的是"),a("strong",[t._v("可迭代的对象")]),t._v("，"),a("code",[t._v("literation_variable")]),t._v(" 表示"),a("strong",[t._v("迭代变量")]),t._v("（即当前正在被处理的可迭代对象的元素），使用关键字 "),a("code",[t._v("in")]),t._v(" 迭代变量从可迭代对象中取出元素")]),t._v(" "),a("li",[t._v("以冒号 "),a("code",[t._v(":")]),t._v(" 结尾")])]),t._v(" "),a("h2",{attrs:{id:"while-循环"}},[t._v("while 循环")]),t._v(" "),a("h3",{attrs:{id:"定义"}},[t._v("定义")]),t._v(" "),a("p",[a("code",[t._v("while")]),t._v(" 循环是一种"),a("strong",[t._v("无限迭代")]),t._v("，即循环重复次数运行前未知（但并不是无法终止循环的「死循环」），并在"),a("strong",[t._v("满足某个条件时结束循环")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("card_deck "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nhand "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# adds the last element of the card_deck list to the hand list")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# until the values in hand add up to 17 or more")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pop is the list method to remove the last element of it and get this element")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    hand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("card_deck"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("以关键字 "),a("code",[t._v("while")]),t._v(" 开始")]),t._v(" "),a("li",[t._v("后面是一个"),a("strong",[t._v("布尔表达式")]),t._v("检查条件，根据"),a("strong",[t._v("布尔值是否为 "),a("code",[t._v("true")])]),t._v(" 决定是否运行循环主体")]),t._v(" "),a("li",[t._v("以冒号 "),a("code",[t._v(":")]),t._v(" 结尾")]),t._v(" "),a("li",[t._v("每次进行循环前先要进行"),a("strong",[t._v("条件评估")]),t._v("，为了"),a("strong",[t._v("避免进行「死」循环")]),t._v("，需要在"),a("strong",[t._v("缩进主体中至少修改测试条件表达式中的一个变量")])])]),t._v(" "),a("h2",{attrs:{id:"中断语句"}},[t._v("中断语句")]),t._v(" "),a("p",[t._v("控制何时循环应该"),a("strong",[t._v("结束")]),t._v("，或者"),a("strong",[t._v("跳过")]),t._v("某个迭代。使用关键字 "),a("code",[t._v("break")]),t._v(" 和 "),a("code",[t._v("continue")]),t._v(" 实现。")]),t._v(" "),a("h3",{attrs:{id:"break-语句"}},[t._v("break 语句")]),t._v(" "),a("p",[a("code",[t._v("break")]),t._v(" 语句使"),a("strong",[t._v("循环终止")]),t._v("，跳出整个循环，执行下一行代码。")]),t._v(" "),a("h3",{attrs:{id:"continue-语句"}},[t._v("continue 语句")]),t._v(" "),a("p",[a("code",[t._v("continue")]),t._v(" 语句"),a("strong",[t._v("跳过当前循环的这一次迭代")]),t._v("，从头执行"),a("strong",[t._v("下一次")]),t._v("循环")]),t._v(" "),a("h2",{attrs:{id:"迭代器-literator"}},[t._v("迭代器 literator")]),t._v(" "),a("p",[t._v("迭代器是一种"),a("strong",[t._v("表示数据流的对象")]),t._v("，可使用"),a("strong",[t._v("生成器")]),t._v("创建迭代器。")]),t._v(" "),a("h3",{attrs:{id:"生成器-generator"}},[t._v("生成器 generator")]),t._v(" "),a("p",[t._v("生成器一般指生成器函数（也可指函数生成的迭代器对象，即迭代器），即使用"),a("strong",[t._v("函数创建迭代器")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("my_range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成器函数，生成一个从0到 x-1 的数字流")]),t._v("\n    i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" i\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("p",[t._v("⚠️")]),t._v(" "),a("ul",[a("li",[t._v("关键字 "),a("code",[t._v("yield")]),t._v("（而非 "),a("code",[t._v("return")]),t._v("）使函数能够"),a("strong",[t._v("每一次返回一个值")])]),t._v(" "),a("li",[t._v("关键字 "),a("code",[t._v("yield")]),t._v(" 使函数每次被调用时都从"),a("strong",[t._v("停下的位置继续")])]),t._v(" "),a("li",[t._v("关键字 "),a("code",[t._v("yield")]),t._v(" 将"),a("strong",[t._v("生成器函数")]),t._v("与普通函数区分开来")])]),t._v(" "),a("p",[t._v("调用生成器函数")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_range"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("🔨")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印出存储迭代器的内存地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("generator object my_range at 0x111a2d93"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("8")]),t._v(">")]),t._v("\n")])])]),a("p",[t._v("输出数据流的值使用"),a("code",[t._v("for")]),t._v("循环")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" my_range"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("🔨")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("h3",{attrs:{id:"对比"}},[t._v("对比")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("可迭代对象")]),t._v("（如列表），是可迭代（每次取出一个元素）但"),a("strong",[t._v("不是数据流")])]),t._v(" "),a("li",[t._v("迭代器则是一个"),a("strong",[t._v("数据流对象")])])]),t._v(" "),a("h3",{attrs:{id:"生成器的有点"}},[t._v("生成器的有点")]),t._v(" "),a("blockquote",[a("p",[t._v("生成器是构建迭代器的 “懒惰” 方式。当内存不够存储完整实现的列表时，或者计算每个列表元素的代价很高，你希望尽量推迟计算时，就可以使用生成器。但是这些元素只能遍历一次。")])]),t._v(" "),a("p",[t._v("摘自 https://softwareengineering.stackexchange.com/questions/290231/when-should-i-use-a-generator-and-when-a-list-in-python/290235")]),t._v(" "),a("blockquote",[a("p",[t._v("由于使用生成器是一次处理一个数据，在内存和存储的需求上会比使用list方式直接全部生成再存储节省很多资源。")])]),t._v(" "),a("p",[t._v("摘自 https://softwareengineering.stackexchange.com/questions/273551/should-i-prefer-python-generators-to-lists")])])}),[],!1,null,null,null);s.default=e.exports}}]);